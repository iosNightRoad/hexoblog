{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/landscape/source/css/images/board-bg.png","path":"css/images/board-bg.png","modified":false},{"_id":"themes/landscape/source/css/images/content-bg.png","path":"css/images/content-bg.png","modified":false},{"_id":"themes/landscape/source/css/images/sidebar-bg.png","path":"css/images/sidebar-bg.png","modified":false},{"_id":"themes\\landscape\\source\\js\\script.js","path":"js/script.js","modified":false},{"_id":"themes\\landscape\\source\\css\\style.styl","path":"css/style.styl","modified":false},{"_id":"themes\\landscape\\source\\css\\fonts\\FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes\\landscape\\source\\css\\images\\banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes\\landscape\\source\\css\\images\\board-bg.png","path":"css/images/board-bg.png","modified":false},{"_id":"themes\\landscape\\source\\css\\images\\content-bg.png","path":"css/images/content-bg.png","modified":false},{"_id":"themes\\landscape\\source\\css\\images\\sidebar-bg.png","path":"css/images/sidebar-bg.png","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1406396689000},{"_id":"scaffolds/page.md","mtime":1406396689000},{"_id":"scaffolds/photo.md","mtime":1406396689000},{"_id":"scaffolds/post.md","mtime":1406396689000},{"_id":"themes/landscape/Gruntfile.js","mtime":1404416462000},{"_id":"themes/landscape/LICENSE","mtime":1404416462000},{"_id":"themes/landscape/README.md","mtime":1404416462000},{"_id":"themes/landscape/_config.yml","mtime":1406423601000},{"_id":"themes/landscape/package.json","mtime":1404416462000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1404416462000},{"_id":"themes/landscape/source/js/script.js","mtime":1404416462000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/style.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1404416462000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1404416462000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1404416462000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1404416462000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1404416462000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1404416462000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1404416462000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1404416462000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/category.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/index.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/page.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/post.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1404416462000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1404416462000},{"_id":"themes/landscape/languages/default.yml","mtime":1404416462000},{"_id":"themes/landscape/languages/zh-CN.yml","mtime":1404416462000},{"_id":"themes/landscape/languages/zh-TW.yml","mtime":1404416462000},{"_id":"themes/landscape/layout/_widget/links.ejs","mtime":1404416462000},{"_id":"themes/landscape/source/css/images/board-bg.png","mtime":1404416462000},{"_id":"themes/landscape/source/css/images/content-bg.png","mtime":1404416462000},{"_id":"themes/landscape/source/css/images/sidebar-bg.png","mtime":1404416462000},{"_id":"source/_posts/201407250.md","mtime":1406455322000},{"_id":"source/_posts/2014072510.md","mtime":1406455323000},{"_id":"source/_posts/2014072511.md","mtime":1406455323000},{"_id":"source/_posts/2014072512.md","mtime":1406455323000},{"_id":"source/_posts/2014072513.md","mtime":1406455323000},{"_id":"source/_posts/2014072515.md","mtime":1406455323000},{"_id":"source/_posts/2014072517.md","mtime":1406455323000},{"_id":"source/_posts/2014072518.md","mtime":1406455323000},{"_id":"source/_posts/2014072519.md","mtime":1406455323000},{"_id":"source/_posts/201407252.md","mtime":1406455323000},{"_id":"source/_posts/2014072520.md","mtime":1406455323000},{"_id":"source/_posts/2014072521.md","mtime":1406455323000},{"_id":"source/_posts/2014072522.md","mtime":1406455323000},{"_id":"source/_posts/2014072523.md","mtime":1406455323000},{"_id":"source/_posts/2014072524.md","mtime":1406455323000},{"_id":"source/_posts/201407253.md","mtime":1406455323000},{"_id":"source/_posts/201407254.md","mtime":1406455323000},{"_id":"source/_posts/201407255.md","mtime":1406455323000},{"_id":"source/_posts/201407256.md","mtime":1406455323000},{"_id":"source/_posts/201407257.md","mtime":1406455323000},{"_id":"source/_posts/201407258.md","mtime":1406455323000},{"_id":"source/_posts/201407259.md","mtime":1406455323000},{"_id":"source/_posts/2014072514.md~","mtime":1406455641000},{"_id":"scaffolds\\draft.md","mtime":1406396688000},{"_id":"scaffolds\\page.md","mtime":1406396688000},{"_id":"scaffolds\\photo.md","mtime":1406396688000},{"_id":"scaffolds\\post.md","mtime":1406396688000},{"_id":"source\\_posts\\201407250.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072510.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072511.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072512.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072513.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072515.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072517.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072518.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072519.md","mtime":1406455322000},{"_id":"source\\_posts\\201407252.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072520.md","mtime":1406461129000},{"_id":"source\\_posts\\2014072521.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072522.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072523.md","mtime":1406455322000},{"_id":"source\\_posts\\2014072524.md","mtime":1406455322000},{"_id":"source\\_posts\\201407253.md","mtime":1406455322000},{"_id":"source\\_posts\\201407254.md","mtime":1406455322000},{"_id":"source\\_posts\\201407255.md","mtime":1406455322000},{"_id":"source\\_posts\\201407256.md","mtime":1406455322000},{"_id":"source\\_posts\\201407257.md","mtime":1406455322000},{"_id":"source\\_posts\\201407258.md","mtime":1406455322000},{"_id":"source\\_posts\\201407259.md","mtime":1406455322000},{"_id":"themes\\landscape\\Gruntfile.js","mtime":1404416462000},{"_id":"themes\\landscape\\LICENSE","mtime":1404416462000},{"_id":"themes\\landscape\\README.md","mtime":1404416462000},{"_id":"themes\\landscape\\_config.yml","mtime":1406423600000},{"_id":"themes\\landscape\\package.json","mtime":1404416462000},{"_id":"themes\\landscape\\languages\\default.yml","mtime":1404416462000},{"_id":"themes\\landscape\\languages\\zh-CN.yml","mtime":1404416462000},{"_id":"themes\\landscape\\languages\\zh-TW.yml","mtime":1404416462000},{"_id":"themes\\landscape\\scripts\\fancybox.js","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\archive.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\category.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\index.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\layout.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\page.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\post.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\tag.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_widget\\archive.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_widget\\category.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_widget\\links.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_widget\\recent_posts.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_widget\\tag.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_widget\\tagcloud.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\after-footer.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\archive-post.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\archive.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\article.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\footer.ejs","mtime":1406460431000},{"_id":"themes\\landscape\\layout\\_partial\\google-analytics.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\head.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\header.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\mobile-nav.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\sidebar.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\post\\category.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\post\\date.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\post\\gallery.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\post\\nav.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\post\\tag.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\layout\\_partial\\post\\title.ejs","mtime":1404416462000},{"_id":"themes\\landscape\\source\\js\\script.js","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_extend.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_variables.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\style.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\archive.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\article.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\comment.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\footer.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\header.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\highlight.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\mobile.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\sidebar-aside.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\sidebar-bottom.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_partial\\sidebar.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_util\\grid.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\_util\\mixin.styl","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\fonts\\FontAwesome.otf","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.eot","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.svg","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.ttf","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.woff","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\images\\banner.jpg","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\images\\board-bg.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\images\\content-bg.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\css\\images\\sidebar-bg.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\blank.gif","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_loading.gif","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_overlay.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_sprite.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\jquery.fancybox.css","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\jquery.fancybox.js","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1404416462000},{"_id":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1404416462000},{"_id":"source\\_posts\\2014072601.md","mtime":1406467614000}],"Category":[{"name":"ios","_id":"fto9rk4dsgy1i8x8","posts":["oe7tcozf7pnkvqv6","rui53p0pcixzsuq3","468xijts4pndyy14","lj07xqgte4r77blm","r17d1ysaspkxp6ry","7uiti1xkctm1igv9","ci4agj6p3niduj7o","m3f6kl0w19mtslxz","yqmho05575ehd8yk","qcc1fwixbsxu558d","mrxuqp4au65wt7ln","q5cdb1gfcouieexe","lrxiehftylf6jqlu","qy3reslt5xpieoe6","k9ii4rjsxn5s14hc","0do00wccgezu8bjs","knyx9644dm28yrms","8gqvpesxaevvlhqq","8shgkc0au4ujdrxf","7hr6l0xiiymdya8c","5eyd1it2whlfwuda"]},{"name":"github","_id":"918ccko9fc7a1cge","posts":["i7omlrntnm7eprnz"]}],"Page":[],"Post":[{"title":"当你用到系统的视频播放器的时候想要淡入淡出的效果如下Only转载","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">﻿    CATransition *<span class=\"variable\">animation =</span> [CATransition animation];</div><div class=\"line\">    animation.<span class=\"variable\">delegate =</span> self;</div><div class=\"line\">    animation.<span class=\"variable\">duration =</span> <span class=\"number\">0.7</span> ;  // 动画持续时间(秒)</div><div class=\"line\">    animation.<span class=\"variable\">timingFunction =</span> UIViewAnimationCurveEaseInOut;</div><div class=\"line\">    animation.<span class=\"variable\">type =</span> kCATransitionFade;//淡入淡出效果</div><div class=\"line\">    [self.mediaPlayView.layer addAnimation:animation forKey:@\\<span class=\"string\">\"animationFade\\\"</span>]</div></pre></td></tr></table></figure>\n\n\n<p>在适合的ViewController启动函数调用该方法，可以达到好的体验。</p>\n","source":"_posts/2014072518.md","raw":"title: \"当你用到系统的视频播放器的时候想要淡入淡出的效果如下Only转载\"\ntag: [ios]\ncategories: ios\n---\n\n```\n﻿    CATransition *animation = [CATransition animation];\n    animation.delegate = self;\n    animation.duration = 0.7 ;  // 动画持续时间(秒)\n    animation.timingFunction = UIViewAnimationCurveEaseInOut;\n    animation.type = kCATransitionFade;//淡入淡出效果\n    [self.mediaPlayView.layer addAnimation:animation forKey:@\\\"animationFade\\\"]\n```\n \n在适合的ViewController启动函数调用该方法，可以达到好的体验。\n\n\n\n","slug":"2014072518","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"oe7tcozf7pnkvqv6","comments":true,"layout":"post","photos":[],"link":""},{"title":"通过颜色来生成一个纯色图片Only","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">﻿- (<span class=\"built_in\">UIImage</span> *)buttonImageFromColor:(<span class=\"built_in\">UIColor</span> *)color{</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> rect = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">self</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.width</span>, <span class=\"keyword\">self</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.height</span>);</div><div class=\"line\">    UIGraphicsBeginImageContext(rect<span class=\"variable\">.size</span>);</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    CGContextSetFillColorWithColor(context, [color CGColor]);</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *img = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    <span class=\"keyword\">return</span> img;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072521.md","raw":"title: \"通过颜色来生成一个纯色图片Only\"\ntag: [ios]\ncategories: ios\n---\n\n```\n﻿- (UIImage *)buttonImageFromColor:(UIColor *)color{\n    CGRect rect = CGRectMake(0, 0, self.frame.size.width, self.frame.size.height);\n    UIGraphicsBeginImageContext(rect.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextSetFillColorWithColor(context, [color CGColor]);\n    CGContextFillRect(context, rect);\n    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return img;\n}\n\n```\n\n","slug":"2014072521","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"rui53p0pcixzsuq3","comments":true,"layout":"post","photos":[],"link":""},{"title":"赞1的动画效果only原创","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)zoomIn: (<span class=\"built_in\">UIView</span> *)view andAnimationDuration: (<span class=\"keyword\">float</span>) duration andWait:(<span class=\"built_in\">BOOL</span>) wait</div><div class=\"line\">{</div><div class=\"line\">    view<span class=\"variable\">.transform</span> = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:duration animations:^{</div><div class=\"line\">        view<span class=\"variable\">.alpha</span> = <span class=\"number\">1.0</span>;</div><div class=\"line\">        view<span class=\"variable\">.transform</span> = CGAffineTransformIdentity;       </div><div class=\"line\">    } completion:^(<span class=\"built_in\">BOOL</span> finished) {</div><div class=\"line\">        view<span class=\"variable\">.alpha</span> = <span class=\"number\">0.0</span>f;</div><div class=\"line\">    }];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072524.md","raw":"title: \"赞1的动画效果only原创\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿```\n- (void)zoomIn: (UIView *)view andAnimationDuration: (float) duration andWait:(BOOL) wait\n{\n    view.transform = CGAffineTransformMakeScale(0, 0);\n    [UIView animateWithDuration:duration animations:^{\n        view.alpha = 1.0;\n        view.transform = CGAffineTransformIdentity;       \n    } completion:^(BOOL finished) {\n        view.alpha = 0.0f;\n    }];\n}\n```\n\n\n","slug":"2014072524","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"468xijts4pndyy14","comments":true,"layout":"post","photos":[],"link":""},{"title":"ios7兼容方法四川转帖","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿#### 1.所有的uiviewcontroller加如下方法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>) viewDidLayoutSubviews {</div><div class=\"line\">        <span class=\"keyword\">if</span> ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= <span class=\"number\">7.0</span>){</div><div class=\"line\">            <span class=\"built_in\">CGRect</span> viewBounds = <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span>;</div><div class=\"line\">            <span class=\"built_in\">CGFloat</span> topBarOffset = <span class=\"keyword\">self</span><span class=\"variable\">.topLayoutGuide</span><span class=\"variable\">.length</span>;</div><div class=\"line\">            viewBounds<span class=\"variable\">.origin</span><span class=\"variable\">.y</span> = topBarOffset * -<span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span> = viewBounds;</div><div class=\"line\">            [[<span class=\"built_in\">UIApplication</span> sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];</div><div class=\"line\">        }</div><div class=\"line\">    }</div></pre></td></tr></table></figure>\n\n<p>实现这个方法，然后在viewDidLoad里加一句</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(setAutomaticallyAdjustsScrollViewInsets:)])</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.automaticallyAdjustsScrollViewInsets</span> = <span class=\"literal\">NO</span>;</div></pre></td></tr></table></figure>\n\n<h4 id=\"2-在项目的plist文件里加View_controller-based_status_bar_appearance，值为no。\">2.在项目的plist文件里加View controller-based status bar appearance，值为no。</h4>\n<p>再做ios7兼容的时候最好让所有的UIViewController继承一个自己定义的UIViewController，然后好统一管理。然后在这个自己定义的UIViewController里</p>\n","source":"_posts/201407254.md","raw":"title: \"ios7兼容方法四川转帖\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿#### 1.所有的uiviewcontroller加如下方法。\n\n```\n    - (void) viewDidLayoutSubviews {\n        if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0){\n            CGRect viewBounds = self.view.bounds;\n            CGFloat topBarOffset = self.topLayoutGuide.length;\n            viewBounds.origin.y = topBarOffset * -1;\n            self.view.bounds = viewBounds;\n            [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];\n        }\n    }\n```\n\n实现这个方法，然后在viewDidLoad里加一句\n\n```\nif([self respondsToSelector:@selector(setAutomaticallyAdjustsScrollViewInsets:)])\n    self.automaticallyAdjustsScrollViewInsets = NO;\n```\n\n#### 2.在项目的plist文件里加View controller-based status bar appearance，值为no。\n\n再做ios7兼容的时候最好让所有的UIViewController继承一个自己定义的UIViewController，然后好统一管理。然后在这个自己定义的UIViewController里\n\n\n","slug":"201407254","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"lj07xqgte4r77blm","comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS开发常用的第三方类库时光转帖","categories":["fto9rk4dsgy1i8x8"],"content":"<p> <a href=\"http://my.oschina.net/long1199/blog/152467\" target=\"_blank\" rel=\"external\">这篇文章非常不错，希望对各位兄弟有用</a>﻿<a href=\"http://my.oschina.net/long1199/blog/152467\" target=\"_blank\" rel=\"external\">http://my.oschina.net/long1199/blog/152467</a></p>\n","source":"_posts/201407257.md","raw":"title: \"iOS开发常用的第三方类库时光转帖\"\ntag: [ios]\ncategories: ios\n---\n\n\n [这篇文章非常不错，希望对各位兄弟有用](﻿http://my.oschina.net/long1199/blog/152467)﻿http://my.oschina.net/long1199/blog/152467\n \n\n\n\n\n\n","slug":"201407257","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"r17d1ysaspkxp6ry","comments":true,"layout":"post","photos":[],"link":""},{"title":"9款优秀的免费测试框架帮你揪出app中的臭虫时光转帖","categories":["fto9rk4dsgy1i8x8"],"content":"<p><a href=\"http://www.cocoachina.com/applenews/devnews/2013/1025/7242.html\" target=\"_blank\" rel=\"external\">9款优秀的免费测试框架帮你揪出app中的臭虫时光转帖</a></p>\n","source":"_posts/201407250.md","raw":"title: \"9款优秀的免费测试框架帮你揪出app中的臭虫时光转帖\"\ntag: [ios]\ncategories: ios\n---\n\n[9款优秀的免费测试框架帮你揪出app中的臭虫时光转帖](http://www.cocoachina.com/applenews/devnews/2013/1025/7242.html)\n\n\n","slug":"201407250","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"7uiti1xkctm1igv9","comments":true,"layout":"post","photos":[],"link":""},{"title":"tableview编辑状态下如何进去didselect方法笑脸","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">﻿<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.allowsSelectionDuringEditing</span> = <span class=\"literal\">YES</span>;必须加上这一句，否则不会进去。</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072512.md","raw":"title: \"tableview编辑状态下如何进去didselect方法笑脸\"\ntag: [ios]\ncategories: ios\n---\n\n```\n﻿self.tableView.allowsSelectionDuringEditing = YES;必须加上这一句，否则不会进去。\n```\n\n\n","slug":"2014072512","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"ci4agj6p3niduj7o","comments":true,"layout":"post","photos":[],"link":""},{"title":"UITextField设置placeholder颜色Only转载","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">﻿<span class=\"command\">\\n</span><span class=\"command\">\\n</span><span class=\"command\">\\n</span><span class=\"command\">\\n</span><span class=\"command\">\\n</span><span class=\"command\">\\n</span><span class=\"command\">\\n</span>    UIColor *color = <span class=\"special\">[</span>UIColor redColor<span class=\"special\">]</span>;</div><div class=\"line\"><span class=\"command\">\\n</span>    _textField.attributedPlaceholder = <span class=\"special\">[</span><span class=\"special\">[</span>NSAttributedString alloc<span class=\"special\">]</span> initWithString:@<span class=\"command\">\\\"</span>密码<span class=\"command\">\\\"</span> attributes:@<span class=\"special\">{</span>NSForegroundColorAttributeName: color<span class=\"special\">}</span><span class=\"special\">]</span>;</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072515.md","raw":"title: \"UITextField设置placeholder颜色Only转载\"\ntag: [ios]\ncategories: ios\n---\n\n```\n﻿\\n\\n\\n\\n\\n\\n\\n    UIColor *color = [UIColor redColor];\n\\n    _textField.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@\\\"密码\\\" attributes:@{NSForegroundColorAttributeName: color}];\n```\n\n\n","slug":"2014072515","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"m3f6kl0w19mtslxz","comments":true,"layout":"post","photos":[],"link":""},{"title":"检测app版本更新四川兄原创","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">﻿/<span class=\"keyword\">*</span></div><div class=\"line\">调用</div><div class=\"line\"> [CheckAppUpdate checkAppUpdate:APPID callBack:^(NSDictionary <span class=\"keyword\">*</span>dic){</div><div class=\"line\">    NSLog(<span class=\"comment\">@\\\"dic:%@\\\",dic);</span></div><div class=\"line\"> Dic字段说明：status为0都是异常，1则正常，如果是1，看info里的说明</div><div class=\"line\"> Info字段说：</div><div class=\"line\">    isUpdate 是否需要更新</div><div class=\"line\"> Info下serverInfo字段说明：</div><div class=\"line\">    1.trackViewUrl 就是要更新的url地址，直接openUrl打开。</div><div class=\"line\">    2.trackName app名字。</div><div class=\"line\">    3.升级说明。</div><div class=\"line\"> }];</div><div class=\"line\"> <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"special\">#</span>import &lt;Foundation/Foundation.h</div><div class=\"line\">@interface CheckAppUpdate : NSObject</div><div class=\"line\">+(void)checkAppUpdate:(NSString *)appId callBack:(void(^)(NSDictionary*))callBack;</div><div class=\"line\">@end</div><div class=\"line\">//  CheckAppUpdate.m</div><div class=\"line\"><span class=\"special\">#</span>import <span class=\"command\">\\\"</span>CheckAppUpdate.h<span class=\"command\">\\\"</span></div><div class=\"line\">@implementation CheckAppUpdate</div><div class=\"line\">+(void)checkAppUpdate:(NSString *)appId callBack:(void(^)(NSDictionary*))callBack<span class=\"special\">{</span></div><div class=\"line\">//    回调</div><div class=\"line\">    void(^falieBack)(NSString *) = ^(NSString *errorString)<span class=\"special\">{</span></div><div class=\"line\">        if(callBack)<span class=\"special\">{</span></div><div class=\"line\">            dispatch_async(dispatch_get_main_queue(), ^<span class=\"special\">{</span></div><div class=\"line\">                callBack(@<span class=\"special\">{</span>@<span class=\"command\">\\\"</span>status<span class=\"command\">\\\"</span>:@0,@<span class=\"command\">\\\"</span>error<span class=\"command\">\\\"</span>:errorString<span class=\"special\">}</span>);</div><div class=\"line\">            <span class=\"special\">}</span>);</div><div class=\"line\">        <span class=\"special\">}</span></div><div class=\"line\">    <span class=\"special\">}</span>;</div><div class=\"line\">    void(^sucessBack)(NSDictionary *) = ^(NSDictionary *dic)<span class=\"special\">{</span></div><div class=\"line\">        if(callBack)<span class=\"special\">{</span></div><div class=\"line\">            dispatch_async(dispatch_get_main_queue(), ^<span class=\"special\">{</span></div><div class=\"line\">                callBack(@<span class=\"special\">{</span>@<span class=\"command\">\\\"</span>status<span class=\"command\">\\\"</span>:@1,@<span class=\"command\">\\\"</span>info<span class=\"command\">\\\"</span>:dic<span class=\"special\">}</span>);</div><div class=\"line\">            <span class=\"special\">}</span>);</div><div class=\"line\">        <span class=\"special\">}</span></div><div class=\"line\">    <span class=\"special\">}</span>;</div><div class=\"line\">    dispatch_async(dispatch_get_global_queue(0, 0), ^<span class=\"special\">{</span></div><div class=\"line\">//        获取app信息。</div><div class=\"line\">        NSString *APP_INFO_URL = <span class=\"special\">[</span>NSString stringWithFormat:@<span class=\"command\">\\\"</span>http://itunes.apple.com/lookup?id=<span class=\"comment\">%@\\\",appId];</span></div><div class=\"line\">        NSData *data = <span class=\"special\">[</span>NSData dataWithContentsOfURL:<span class=\"special\">[</span>NSURL URLWithString:APP_INFO_URL<span class=\"special\">]</span><span class=\"special\">]</span>;</div><div class=\"line\">//        如果app信息不存在。</div><div class=\"line\">        if(!data)<span class=\"special\">{</span></div><div class=\"line\">            falieBack(@<span class=\"command\">\\\"</span>url response data is invalid<span class=\"command\">\\\"</span>);</div><div class=\"line\">            return;</div><div class=\"line\">        <span class=\"special\">}</span></div><div class=\"line\">        NSError *error = nil;</div><div class=\"line\">        NSDictionary *dictionary = <span class=\"special\">[</span>NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableLeaves error:<span class=\"special\">&</span>error<span class=\"special\">]</span>;</div><div class=\"line\">//        结果是否正确。</div><div class=\"line\">        if(error || <span class=\"special\">[</span><span class=\"special\">[</span>dictionary objectForKey:@<span class=\"command\">\\\"</span>resultCount<span class=\"command\">\\\"</span><span class=\"special\">]</span> intValue<span class=\"special\">]</span>==0 || <span class=\"special\">[</span><span class=\"special\">[</span>dictionary objectForKey:@<span class=\"command\">\\\"</span>results<span class=\"command\">\\\"</span><span class=\"special\">]</span> count<span class=\"special\">]</span>==0)<span class=\"special\">{</span></div><div class=\"line\">            falieBack(@<span class=\"command\">\\\"</span>not current response data<span class=\"command\">\\\"</span>);</div><div class=\"line\">            return;</div><div class=\"line\">        <span class=\"special\">}</span>;</div><div class=\"line\">//        获取到本地app的版本</div><div class=\"line\">        NSString *localVerString = <span class=\"special\">[</span><span class=\"special\">[</span><span class=\"special\">[</span>NSBundle mainBundle<span class=\"special\">]</span> infoDictionary<span class=\"special\">]</span> objectForKey:(NSString *)kCFBundleVersionKey<span class=\"special\">]</span>;</div><div class=\"line\">//        获取服务器上的app基本信息</div><div class=\"line\">        NSDictionary *resultDictionary = <span class=\"special\">[</span><span class=\"special\">[</span>dictionary objectForKey:@<span class=\"command\">\\\"</span>results<span class=\"command\">\\\"</span><span class=\"special\">]</span> lastObject<span class=\"special\">]</span>;</div><div class=\"line\">        NSString *serverVerString = <span class=\"special\">[</span>resultDictionary objectForKey:@<span class=\"command\">\\\"</span>version<span class=\"command\">\\\"</span><span class=\"special\">]</span>;</div><div class=\"line\">//        是否是最新的。</div><div class=\"line\">        if(<span class=\"special\">[</span>serverVerString compare:localVerString<span class=\"special\">]</span> != NSOrderedDescending)<span class=\"special\">{</span></div><div class=\"line\">            sucessBack(@<span class=\"special\">{</span>@<span class=\"command\">\\\"</span>isUpdate<span class=\"command\">\\\"</span>:@NO<span class=\"special\">}</span>);</div><div class=\"line\">            return;</div><div class=\"line\">        <span class=\"special\">}</span></div><div class=\"line\">//        检测要更新的地址是否有效</div><div class=\"line\">        if(!<span class=\"special\">[</span><span class=\"special\">[</span>resultDictionary objectForKey:@<span class=\"command\">\\\"</span>trackViewUrl<span class=\"command\">\\\"</span><span class=\"special\">]</span> hasPrefix:@<span class=\"command\">\\\"</span>https://<span class=\"command\">\\\"</span><span class=\"special\">]</span>)<span class=\"special\">{</span></div><div class=\"line\">           falieBack(@<span class=\"command\">\\\"</span>update app<span class=\"command\">\\'</span>s url not exists<span class=\"command\">\\\"</span>);</div><div class=\"line\">           return;</div><div class=\"line\">       <span class=\"special\">}</span></div><div class=\"line\">       sucessBack(@<span class=\"special\">{</span>@<span class=\"command\">\\\"</span>isUpdate<span class=\"command\">\\\"</span>:@YES,@<span class=\"command\">\\\"</span>serverInfo<span class=\"command\">\\\"</span>:resultDictionary<span class=\"special\">}</span>);</div><div class=\"line\">    <span class=\"special\">}</span>);</div><div class=\"line\"><span class=\"special\">}</span></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072519.md","raw":"title: \"检测app版本更新四川兄原创\"\ntag: [ios]\ncategories: ios\n---\n\n```\n﻿/*\n调用\n [CheckAppUpdate checkAppUpdate:APPID callBack:^(NSDictionary *dic){\n    NSLog(@\\\"dic:%@\\\",dic);\n Dic字段说明：status为0都是异常，1则正常，如果是1，看info里的说明\n Info字段说：\n    isUpdate 是否需要更新\n Info下serverInfo字段说明：\n    1.trackViewUrl 就是要更新的url地址，直接openUrl打开。\n    2.trackName app名字。\n    3.升级说明。\n }];\n */\n```\n\n```\n#import <Foundation/Foundation.h\n@interface CheckAppUpdate : NSObject\n+(void)checkAppUpdate:(NSString *)appId callBack:(void(^)(NSDictionary*))callBack;\n@end\n//  CheckAppUpdate.m\n#import \\\"CheckAppUpdate.h\\\"\n@implementation CheckAppUpdate\n+(void)checkAppUpdate:(NSString *)appId callBack:(void(^)(NSDictionary*))callBack{\n//    回调\n    void(^falieBack)(NSString *) = ^(NSString *errorString){\n        if(callBack){\n            dispatch_async(dispatch_get_main_queue(), ^{\n                callBack(@{@\\\"status\\\":@0,@\\\"error\\\":errorString});\n            });\n        }\n    };\n    void(^sucessBack)(NSDictionary *) = ^(NSDictionary *dic){\n        if(callBack){\n            dispatch_async(dispatch_get_main_queue(), ^{\n                callBack(@{@\\\"status\\\":@1,@\\\"info\\\":dic});\n            });\n        }\n    };\n    dispatch_async(dispatch_get_global_queue(0, 0), ^{\n//        获取app信息。\n        NSString *APP_INFO_URL = [NSString stringWithFormat:@\\\"http://itunes.apple.com/lookup?id=%@\\\",appId];\n        NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:APP_INFO_URL]];\n//        如果app信息不存在。\n        if(!data){\n            falieBack(@\\\"url response data is invalid\\\");\n            return;\n        }\n        NSError *error = nil;\n        NSDictionary *dictionary = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableLeaves error:&error];\n//        结果是否正确。\n        if(error || [[dictionary objectForKey:@\\\"resultCount\\\"] intValue]==0 || [[dictionary objectForKey:@\\\"results\\\"] count]==0){\n            falieBack(@\\\"not current response data\\\");\n            return;\n        };\n//        获取到本地app的版本\n        NSString *localVerString = [[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString *)kCFBundleVersionKey];\n//        获取服务器上的app基本信息\n        NSDictionary *resultDictionary = [[dictionary objectForKey:@\\\"results\\\"] lastObject];\n        NSString *serverVerString = [resultDictionary objectForKey:@\\\"version\\\"];\n//        是否是最新的。\n        if([serverVerString compare:localVerString] != NSOrderedDescending){\n            sucessBack(@{@\\\"isUpdate\\\":@NO});\n            return;\n        }\n//        检测要更新的地址是否有效\n        if(![[resultDictionary objectForKey:@\\\"trackViewUrl\\\"] hasPrefix:@\\\"https://\\\"]){\n           falieBack(@\\\"update app\\'s url not exists\\\");\n           return;\n       }\n       sucessBack(@{@\\\"isUpdate\\\":@YES,@\\\"serverInfo\\\":resultDictionary});\n    });\n}\n@end\n```\n\n\n\n\n\n","slug":"2014072519","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"yqmho05575ehd8yk","comments":true,"layout":"post","photos":[],"link":""},{"title":"GCD实现倒计时功能Only转载","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)startTime{</div><div class=\"line\">    __block int <span class=\"variable\">timeout=</span><span class=\"number\">30</span>; //倒计时时间</div><div class=\"line\">    dispatch_queue_t <span class=\"variable\">queue =</span> dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">    dispatch_source_t <span class=\"variable\">_timer =</span> dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class=\"number\">0</span>, <span class=\"number\">0</span>,queue);</div><div class=\"line\">    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, <span class=\"number\">0</span>),<span class=\"number\">1.0</span>*NSEC_PER_SEC, <span class=\"number\">0</span>); //每秒执行</div><div class=\"line\">    dispatch_source_set_event_handler(_timer, ^{</div><div class=\"line\">        <span class=\"keyword\">if</span>(timeout&lt;=<span class=\"number\">0</span>){ //倒计时结束，关闭</div><div class=\"line\">            dispatch_source_cancel(_timer);</div><div class=\"line\">            dispatch_async(dispatch_get_main_queue(), ^{</div><div class=\"line\">                //设置界面的按钮显示 根据自己需求设置</div><div class=\"line\">                [l_timeButton setTitle:@\\<span class=\"string\">\"发送验证码\\\"</span> forState:UIControlStateNormal];</div><div class=\"line\">                l_timeButton.<span class=\"variable\">userInteractionEnabled =</span> YES;</div><div class=\"line\">            });</div><div class=\"line\">        }<span class=\"keyword\">else</span>{</div><div class=\"line\">            //            int <span class=\"variable\">minutes =</span> timeout / <span class=\"number\">60</span>;</div><div class=\"line\">            int <span class=\"variable\">seconds =</span> timeout % <span class=\"number\">60</span>;</div><div class=\"line\">            NSString *<span class=\"variable\">strTime =</span> [NSString stringWithFormat:@\\<span class=\"string\">\"%.2d\\\"</span>, seconds];</div><div class=\"line\">            dispatch_async(dispatch_get_main_queue(), ^{</div><div class=\"line\">                //设置界面的按钮显示 根据自己需求设置</div><div class=\"line\">                NSLog(@\\<span class=\"string\">\"____%@\\\"</span>,strTime);</div><div class=\"line\">                [l_timeButton setTitle:[NSString stringWithFormat:@\\<span class=\"string\">\"%@秒后重新发送\\\"</span>,strTime] forState:UIControlStateNormal];</div><div class=\"line\">                l_timeButton.<span class=\"variable\">userInteractionEnabled =</span> NO;</div><div class=\"line\">                </div><div class=\"line\">            });</div><div class=\"line\">            timeout--;</div><div class=\"line\">            </div><div class=\"line\">        }</div><div class=\"line\">    });</div><div class=\"line\">    dispatch_resume(_timer);</div><div class=\"line\">    </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/201407252.md","raw":"title: \"GCD实现倒计时功能Only转载\"\ntag: [ios]\ncategories: ios\n---\n\n```\n-(void)startTime{\n    __block int timeout=30; //倒计时时间\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);\n    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行\n    dispatch_source_set_event_handler(_timer, ^{\n        if(timeout<=0){ //倒计时结束，关闭\n            dispatch_source_cancel(_timer);\n            dispatch_async(dispatch_get_main_queue(), ^{\n                //设置界面的按钮显示 根据自己需求设置\n                [l_timeButton setTitle:@\\\"发送验证码\\\" forState:UIControlStateNormal];\n                l_timeButton.userInteractionEnabled = YES;\n            });\n        }else{\n            //            int minutes = timeout / 60;\n            int seconds = timeout % 60;\n            NSString *strTime = [NSString stringWithFormat:@\\\"%.2d\\\", seconds];\n            dispatch_async(dispatch_get_main_queue(), ^{\n                //设置界面的按钮显示 根据自己需求设置\n                NSLog(@\\\"____%@\\\",strTime);\n                [l_timeButton setTitle:[NSString stringWithFormat:@\\\"%@秒后重新发送\\\",strTime] forState:UIControlStateNormal];\n                l_timeButton.userInteractionEnabled = NO;\n                \n            });\n            timeout--;\n            \n        }\n    });\n    dispatch_resume(_timer);\n    \n}\n```\n\n\n","slug":"201407252","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"qcc1fwixbsxu558d","comments":true,"layout":"post","photos":[],"link":""},{"title":"微信支付","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿微信支付-文档-demo-下载 <a href=\"http://wxpay.weixin.qq.com/doc/http://jingwei6.me/2014/02/28/reveal_crack.html\" target=\"_blank\" rel=\"external\">http://wxpay.weixin.qq.com/doc/http://jingwei6.me/2014/02/28/reveal_crack.html</a></p>\n","source":"_posts/2014072522.md","raw":"title: \"微信支付\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿微信支付-文档-demo-下载 http://wxpay.weixin.qq.com/doc/http://jingwei6.me/2014/02/28/reveal_crack.html\n\n\n\n\n","slug":"2014072522","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"mrxuqp4au65wt7ln","comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS7上tableView的分割线左边短了一点Only转载","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿iOS7里面tableViewCell上面的分割线，左边少了20个像素，用下面的方法，可以让分割线完整显示出来</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ([_tableView respondsToSelector:@selector(<span class=\"keyword\">set</span>SeparatorInset:)]) {</div><div class=\"line\">           [_tableView <span class=\"keyword\">set</span>SeparatorInset:UIEdgeInsetsZero];</div><div class=\"line\">       }</div></pre></td></tr></table></figure>\n\n","source":"_posts/201407255.md","raw":"title: \"iOS7上tableView的分割线左边短了一点Only转载\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿iOS7里面tableViewCell上面的分割线，左边少了20个像素，用下面的方法，可以让分割线完整显示出来\n\n```\nif ([_tableView respondsToSelector:@selector(setSeparatorInset:)]) {\n           [_tableView setSeparatorInset:UIEdgeInsetsZero];\n       }\n```\n\n\n\n\n\n","slug":"201407255","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"q5cdb1gfcouieexe","comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS开发各种库各种工具包输入兄转载","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿<a href=\"http://github.ibireme.com/github/list/ios/\" target=\"_blank\" rel=\"external\">iOS开发各种库各种工具包输入兄转载</a><a href=\"http://github.ibireme.com/github/list/ios/\" target=\"_blank\" rel=\"external\">http://github.ibireme.com/github/list/ios/</a></p>\n","source":"_posts/201407258.md","raw":"title: \"iOS开发各种库各种工具包输入兄转载\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿[iOS开发各种库各种工具包输入兄转载](http://github.ibireme.com/github/list/ios/)http://github.ibireme.com/github/list/ios/\n\n\n","slug":"201407258","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"lrxiehftylf6jqlu","comments":true,"layout":"post","photos":[],"link":""},{"title":"tableView设置可以滚动的背景图Only转载","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿设置滚动背景图时，只要保证背景图在tableview中处于最低层。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//iOS7 的一句就搞定了</span></div><div class=\"line\"> <span class=\"attr_selector\">[tableView insertSubview:tableBackGroundView atIndex:0]</span>; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//iOS6</span></div><div class=\"line\"> <span class=\"attr_selector\">[tableView insertSubview:tableBackGroundView atIndex:0]</span>;</div></pre></td></tr></table></figure>\n\n<p>除此之外</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pp\">- <span class=\"params\">(<span class=\"variable\">UITableViewCell</span> *)</span>tableView:<span class=\"params\">(<span class=\"variable\">UITableView</span> *)</span>tableView cellForRowAtIndexPath:<span class=\"params\">(<span class=\"variable\">NSIndexPath</span> *)</span>indexPath；</span></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">UIView</span> *)</span>tableView:<span class=\"params\">(<span class=\"variable\">UITableView</span> *)</span>tableView viewForFooterInSection:<span class=\"params\">(<span class=\"variable\">NSInteger</span>)</span>section;</div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">UIView</span> *)</span>tableView:<span class=\"params\">(<span class=\"variable\">UITableView</span> *)</span>tableView viewForHeaderInSection:<span class=\"params\">(<span class=\"variable\">NSInteger</span>)</span>section;</div></pre></td></tr></table></figure>\n\n<p>上面的三个方法若被调用则要在被调用的方法加一句</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">[tableView sendSubviewToBack:tableBackGroundView]</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072513.md","raw":"title: \"tableView设置可以滚动的背景图Only转载\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿设置滚动背景图时，只要保证背景图在tableview中处于最低层。\n\n```\n//iOS7 的一句就搞定了\n [tableView insertSubview:tableBackGroundView atIndex:0]; \n \n//iOS6\n [tableView insertSubview:tableBackGroundView atIndex:0]; \n```\n\n除此之外\n\n```\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath；\n- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section;\n- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section;\n```\n\n上面的三个方法若被调用则要在被调用的方法加一句\n\n```\n[tableView sendSubviewToBack:tableBackGroundView];\n```\n\n\n","slug":"2014072513","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"qy3reslt5xpieoe6","comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS图片拉伸解决办法Only","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿这个方法可以使图片两端不拉伸，中间拉伸。解决图片拉伸变形问题,设置之后无论把image放到什么控件中都可以自动拉伸了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImage *<span class=\"variable\">image =</span> [UIImage imageNamed:@\\<span class=\"string\">\"ReceiverTextNodeBkg\\\"</span>];</div><div class=\"line\"><span class=\"variable\">image =</span> [image stretchableImageWithLeftCapWidth:floorf(image.size.width/<span class=\"number\">2</span>) topCapHeight:floorf(image.size.height/<span class=\"number\">2</span>)];</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072510.md","raw":"title: \"iOS图片拉伸解决办法Only\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿这个方法可以使图片两端不拉伸，中间拉伸。解决图片拉伸变形问题,设置之后无论把image放到什么控件中都可以自动拉伸了\n\n```\nUIImage *image = [UIImage imageNamed:@\\\"ReceiverTextNodeBkg\\\"];\nimage = [image stretchableImageWithLeftCapWidth:floorf(image.size.width/2) topCapHeight:floorf(image.size.height/2)];\n```\n\n\n","slug":"2014072510","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"k9ii4rjsxn5s14hc","comments":true,"layout":"post","photos":[],"link":""},{"title":"VLCforios230编译时光原创","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿<a href=\"https://wiki.videolan.org/iOSCompile\" target=\"_blank\" rel=\"external\">https://wiki.videolan.org/iOSCompile</a> 这个是编译教程 但是由于某些下载被限制了要使用翻墙才能继续<br><a href=\"http://tenacy-free.com/public\" target=\"_blank\" rel=\"external\">http://tenacy-free.com/public</a> 获取免费的翻墙账号密码(VPN)<br><a href=\"http://bbs.maiyadi.com/thread-879836-1-1.html\" target=\"_blank\" rel=\"external\">http://bbs.maiyadi.com/thread-879836-1-1.html</a> mac下设置VPN操作</p>\n","source":"_posts/2014072517.md","raw":"title: \"VLCforios230编译时光原创\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿https://wiki.videolan.org/iOSCompile 这个是编译教程 但是由于某些下载被限制了要使用翻墙才能继续\nhttp://tenacy-free.com/public 获取免费的翻墙账号密码(VPN)\nhttp://bbs.maiyadi.com/thread-879836-1-1.html mac下设置VPN操作\n\n\n\n","slug":"2014072517","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"0do00wccgezu8bjs","comments":true,"layout":"post","photos":[],"link":""},{"title":"优质第三方组件收藏奋斗兄原创","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿####一、瀑布流<br><a href=\"http://applidium.github.io/ADLivelyCollectionView/\" target=\"_blank\" rel=\"external\">http://applidium.github.io/ADLivelyCollectionView/</a></p>\n","source":"_posts/2014072523.md","raw":"title: \"优质第三方组件收藏奋斗兄原创\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿####一、瀑布流\nhttp://applidium.github.io/ADLivelyCollectionView/\n\n\n","slug":"2014072523","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"knyx9644dm28yrms","comments":true,"layout":"post","photos":[],"link":""},{"title":"instancesRespondToSelector与respondsToSelector注意点Only转载","categories":["fto9rk4dsgy1i8x8"],"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">﻿/<span class=\"regexp\">/ main.m#import &lt;Foundation/</span><span class=\"constant\">Foundation</span>.h&gt;<span class=\"variable\">@interface</span> <span class=\"constant\">Test</span> <span class=\"symbol\">:</span> <span class=\"constant\">NSObject</span>-(void) objectFun;+(void) classFun;<span class=\"variable\">@end</span><span class=\"variable\">@implementation</span> <span class=\"constant\">Test</span>-(void) objectFun{}+(void) classFun{}<span class=\"variable\">@endint</span> main(){<span class=\"constant\">BOOL</span> ret;ret=[<span class=\"constant\">Test</span> <span class=\"symbol\">instancesRespondToSelector:</span><span class=\"variable\">@selector</span>(objectFun)];    <span class=\"regexp\">//</span><span class=\"constant\">YESret</span>=[<span class=\"constant\">Test</span> <span class=\"symbol\">instancesRespondToSelector:</span><span class=\"variable\">@selector</span>(classFun)];    <span class=\"regexp\">//</span><span class=\"constant\">NOret</span>=[<span class=\"constant\">Test</span> <span class=\"symbol\">respondsToSelector:</span><span class=\"variable\">@selector</span>(objectFun)];    <span class=\"regexp\">//</span><span class=\"constant\">NOret</span>=[<span class=\"constant\">Test</span> <span class=\"symbol\">respondsToSelector:</span><span class=\"variable\">@selector</span>(classFun)];    <span class=\"regexp\">//</span><span class=\"constant\">YES</span>[<span class=\"constant\">Test</span> classFun];<span class=\"regexp\">//</span>[<span class=\"constant\">Test</span> objectFun];<span class=\"regexp\">//error</span><span class=\"symbol\">:</span> <span class=\"constant\">Class</span> method \\<span class=\"string\">'+objectFun\\' not foundTest* obj    = [[Test alloc] init];ret=[obj respondsToSelector:@selector(objectFun)];    //YESret=[obj respondsToSelector:@selector(classFun)];    //NO//[obj classFun];//error: Instance method \\'-classFun\\' not found[obj objectFun];return 0;}总结：1. respondsToSelector既可以检查类（是否响应指定类方法），也可以检查实例（是否响应指定实例方法）2. instancesRespondToSelector只能写在类名后面，但检测的是实例（是否响应指定实例方法）可以认为[Test instancesRespondToSelector:sel]等价于[obj respondsToSelector:sel]</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/201407253.md","raw":"title: \"instancesRespondToSelector与respondsToSelector注意点Only转载\"\ntag: [ios]\ncategories: ios\n---\n\n```\n﻿// main.m#import <Foundation/Foundation.h>@interface Test : NSObject-(void) objectFun;+(void) classFun;@end@implementation Test-(void) objectFun{}+(void) classFun{}@endint main(){BOOL ret;ret=[Test instancesRespondToSelector:@selector(objectFun)];    //YESret=[Test instancesRespondToSelector:@selector(classFun)];    //NOret=[Test respondsToSelector:@selector(objectFun)];    //NOret=[Test respondsToSelector:@selector(classFun)];    //YES[Test classFun];//[Test objectFun];//error: Class method \\'+objectFun\\' not foundTest* obj    = [[Test alloc] init];ret=[obj respondsToSelector:@selector(objectFun)];    //YESret=[obj respondsToSelector:@selector(classFun)];    //NO//[obj classFun];//error: Instance method \\'-classFun\\' not found[obj objectFun];return 0;}总结：1. respondsToSelector既可以检查类（是否响应指定类方法），也可以检查实例（是否响应指定实例方法）2. instancesRespondToSelector只能写在类名后面，但检测的是实例（是否响应指定实例方法）可以认为[Test instancesRespondToSelector:sel]等价于[obj respondsToSelector:sel]\n```\n\n","slug":"201407253","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"8gqvpesxaevvlhqq","comments":true,"layout":"post","photos":[],"link":""},{"content":"<p>title: “ios黑夜之路技术群成就榜”tag: [ios]categories: ios—-\\n\\t命运像一丝细线，穿梭于茫茫人海，将你我窜成一线，相识在这里。\\t时光流逝，大浪淘沙，勇于拼搏创新者，你们历尽艰辛，为了鼓励后人已此贴铭记、敬仰你们。</p>\n<h4 id=\"一、《猫狗大作战》\">一、《猫狗大作战》</h4>\n<p>2014年5月6号，当哥同学已优秀的《猫狗大作战》萌系游戏荣获腾讯发文宣传</p>\n<p>文章地址:<a href=\"http://games.qq.com/a/20140506/050166.htm\" target=\"_blank\" rel=\"external\">http://games.qq.com/a/20140506/050166.htm</a><br>优秀作品下载地址:<a href=\"http://app.lenovo.com/app/14497517.html\" target=\"_blank\" rel=\"external\">http://app.lenovo.com/app/14497517.html</a></p>\n","source":"_posts/201407256.md","raw":"title: \"ios黑夜之路技术群成就榜\"tag: [ios]categories: ios---\\n\\t命运像一丝细线，穿梭于茫茫人海，将你我窜成一线，相识在这里。\\t时光流逝，大浪淘沙，勇于拼搏创新者，你们历尽艰辛，为了鼓励后人已此贴铭记、敬仰你们。\r\r\r####一、《猫狗大作战》\r2014年5月6号，当哥同学已优秀的《猫狗大作战》萌系游戏荣获腾讯发文宣传\r\r文章地址:http://games.qq.com/a/20140506/050166.htm\r优秀作品下载地址:http://app.lenovo.com/app/14497517.html\r\r\r\r\n\n","slug":"201407256","date":1406430153000,"updated":1406455322000,"excerpt":"","_id":"tztf2e34vqon5q1e","title":"","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"ios手势密码四川兄原创","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"symbol\">#import</span> &lt;<span class=\"class\">UIKit</span>/<span class=\"class\">UIKit</span>.h&gt; <span class=\"symbol\">#import</span> &lt;<span class=\"class\">QuartzCore</span>/<span class=\"class\">QuartzCore</span>.h&gt; @interface <span class=\"class\">GesturePassword</span> : <span class=\"class\">UIView</span> @property(nonatomic,strong)<span class=\"class\">NSMutableArray</span> *recordMovePoints; @property(nonatomic,assign)void(^generatePassword)(<span class=\"class\">GesturePassword</span> *, <span class=\"class\">NSString</span> *); @property(nonatomic,strong)<span class=\"class\">UIWindow</span> *currentWindow; @property(nonatomic,strong)<span class=\"class\">NSString</span> *rightPwd; -(void)registNotifyHandle; -(void)hideSelf; -(void)showSelf; -(<span class=\"class\">GesturePassword</span> *)initByFrame; @end </div><div class=\"line\"><span class=\"symbol\">#import</span> \\<span class=\"comment\">\"GesturePassword.h\\\"</span> //记录触碰点 static <span class=\"class\">NSMutableArray</span> *recordCricleViews = <span class=\"keyword\">nil</span>; //是否允许绘图，因为起点必须先点击到圆圈上 static <span class=\"class\">BOOL</span> canDraw = <span class=\"class\">NO</span>; //基础tag，用来记录圆圈的tag，这个也用来组成密码 const static int <span class=\"class\">PointBaseTag</span> = <span class=\"number\">1</span>; //线宽 const static int <span class=\"class\">LineWidth</span> = <span class=\"number\">6</span>; <span class=\"symbol\">#define</span> <span class=\"class\">BetweenWithNumber</span>(<span class=\"class\">V</span>,<span class=\"class\">A</span>,<span class=\"class\">B</span>) [[<span class=\"class\">NSPredicate</span> <span class=\"method\">predicateWithFormat:</span>@\\<span class=\"comment\">\"self between {%f,%f}\\\"</span>,[(<span class=\"class\">A</span>) floatValue],[(<span class=\"class\">B</span>) floatValue]] <span class=\"method\">evaluateWithObject:</span>(<span class=\"class\">V</span>)] @implementation <span class=\"class\">GesturePassword</span> @synthesize recordMovePoints,generatePassword,currentWindow,rightPwd; //注册通知， -(void)registNotifyHandle{ //    后台来的时候执行锁屏操作     [[<span class=\"class\">NSNotificationCenter</span> defaultCenter] <span class=\"method\">addObserver:</span><span class=\"keyword\">self</span> <span class=\"method\">selector:</span>@selector(showLockScreen) <span class=\"method\">name:</span><span class=\"class\">UIApplicationWillEnterForegroundNotification</span> <span class=\"method\">object:</span><span class=\"keyword\">nil</span>]; } -(void)showLockScreen{     static <span class=\"class\">BOOL</span> hadAddSubview = <span class=\"class\">NO</span>; //    如果是挂上了，就直封屏     if(hadAddSubview){         [<span class=\"keyword\">self</span> showSelf];         return;     } //    挂在window上。     <span class=\"class\">UIWindow</span> *statusWindow = [[[<span class=\"class\">UIApplication</span> sharedApplication] delegate] window];     statusWindow.windowLevel = <span class=\"class\">UIWindowLevelStatusBar</span>;     [statusWindow <span class=\"method\">addSubview:</span><span class=\"keyword\">self</span>];     hadAddSubview = <span class=\"class\">YES</span>; }  //初始化。 -(<span class=\"class\">GesturePassword</span> *)initByFrame{     if((<span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> <span class=\"method\">initWithFrame:</span>[[<span class=\"class\">UIScreen</span> mainScreen] bounds]])){     }     return <span class=\"keyword\">self</span>; } //初始化frame。 - (id)<span class=\"method\">initWithFrame:</span>(<span class=\"class\">CGRect</span>)frame {     <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> <span class=\"method\">initWithFrame:</span>frame];     recordMovePoints = [<span class=\"class\">NSMutableArray</span> array];     if (<span class=\"keyword\">self</span>) {         recordCricleViews = [<span class=\"class\">NSMutableArray</span> array];         <span class=\"class\">UIPanGestureRecognizer</span> *panGesture = [[<span class=\"class\">UIPanGestureRecognizer</span> alloc] <span class=\"method\">initWithTarget:</span><span class=\"keyword\">self</span> <span class=\"method\">action:</span>@selector(<span class=\"method\">gestPanGesture:</span>)];         panGesture.minimumNumberOfTouches = panGesture.maximumNumberOfTouches = <span class=\"number\">1</span>;         [<span class=\"keyword\">self</span> <span class=\"method\">addGestureRecognizer:</span>panGesture];         int i = <span class=\"number\">0</span>,row=-<span class=\"number\">1</span>;         float w = <span class=\"keyword\">self</span>.frame.size.width, h = <span class=\"keyword\">self</span>.frame.size.height, radius = <span class=\"number\">20</span> , diameter = radius * <span class=\"number\">2</span>;         //            算出每个物体之间的左右间距、         float spearX  = (w - (diameter * <span class=\"number\">3</span>)) / <span class=\"number\">4</span>,spearY = (h - (diameter * <span class=\"number\">3</span>)) / <span class=\"number\">4</span>;         while (i&lt;<span class=\"number\">9</span>) {             int step = i%<span class=\"number\">3</span>;             if(step==<span class=\"number\">0</span>)++row;             float tempX = (step + <span class=\"number\">1</span>) * spearX + step * diameter,tempY = (row+<span class=\"number\">1</span>) * spearY + row * diameter;             @autoreleasepool {                 <span class=\"class\">CGRect</span> tempRect = <span class=\"class\">CGRectMake</span>(tempX, tempY, diameter, diameter);                 <span class=\"class\">UIView</span> *cricleView = [[<span class=\"class\">UIView</span> alloc] <span class=\"method\">initWithFrame:</span>tempRect];                 cricleView.tag = <span class=\"class\">PointBaseTag</span> + i ;                 cricleView.layer.cornerRadius = radius;                 cricleView.backgroundColor = [<span class=\"class\">UIColor</span> grayColor];                 [<span class=\"keyword\">self</span> <span class=\"method\">addSubview:</span>cricleView];                 [recordCricleViews <span class=\"method\">addObject:</span>cricleView];             }             ++i;         }     }     return <span class=\"keyword\">self</span>; } //是否和几个目标物发生碰撞 -(<span class=\"class\">UIView</span> *)<span class=\"method\">hasTouchCricleView:</span>(<span class=\"class\">CGPoint</span>)point{     __block <span class=\"class\">UIView</span> *resultView = <span class=\"keyword\">nil</span>;     [recordCricleViews  <span class=\"method\">enumerateObjectsUsingBlock:</span>^(<span class=\"class\">UIView</span> *sview,<span class=\"class\">NSUInteger</span> index,<span class=\"class\">BOOL</span> *stop){         if([<span class=\"keyword\">self</span> <span class=\"method\">rectsTouched:</span>point <span class=\"method\">eimRect:</span>sview.frame]){             resultView = sview;             *stop = <span class=\"class\">YES</span>;         }     }];     return resultView; } //检测当前点击坐标和物体是否碰撞 -(<span class=\"class\">BOOL</span>)<span class=\"method\">rectsTouched:</span>(<span class=\"class\">CGPoint</span> )pointA <span class=\"method\">eimRect:</span>(<span class=\"class\">CGRect</span>)rectB{     <span class=\"class\">BOOL</span> inX = <span class=\"class\">BetweenWithNumber</span>(@(pointA.x),@(rectB.origin.x),@(rectB.origin.x + rectB.size.width)),                 inY = <span class=\"class\">BetweenWithNumber</span>(@(pointA.y),@(rectB.origin.y),@(rectB.origin.y + rectB.size.height));     return inX && inY; } //拖动手势 -(void)<span class=\"method\">gestPanGesture:</span>(<span class=\"class\">UIPanGestureRecognizer</span> *)pan{ //    松开     if(pan.state == <span class=\"class\">UIGestureRecognizerStateEnded</span>){         [recordCricleViews <span class=\"method\">enumerateObjectsUsingBlock:</span>^(<span class=\"class\">UIView</span> *tview,<span class=\"class\">NSUInteger</span> index,<span class=\"class\">BOOL</span> *stop){             [tview <span class=\"method\">setBackgroundColor:</span>[<span class=\"class\">UIColor</span> grayColor]];         }];         <span class=\"class\">NSMutableString</span> *string = [<span class=\"class\">NSMutableString</span> string];         [recordMovePoints <span class=\"method\">enumerateObjectsUsingBlock:</span>^(<span class=\"class\">NSArray</span> *array,<span class=\"class\">NSUInteger</span> index,<span class=\"class\">BOOL</span> *stop){ //            过滤掉<span class=\"number\">0</span>             if([array[<span class=\"number\">0</span>] intValue]&gt;<span class=\"number\">0</span>)             [string <span class=\"method\">appendFormat:</span>@\\<span class=\"comment\">\"%d\\\"</span>,[array[<span class=\"number\">0</span>] intValue]];         }];         recordMovePoints = <span class=\"keyword\">nil</span>;         canDraw = <span class=\"class\">NO</span>;         [<span class=\"keyword\">self</span> setNeedsDisplay];         if(generatePassword){             generatePassword(<span class=\"keyword\">self</span>,string);         }         return;     } //    按下     else if(pan.state == <span class=\"class\">UIGestureRecognizerStateBegan</span>){         <span class=\"class\">CGPoint</span> touchPoint  = [pan <span class=\"method\">locationInView:</span>pan.view];         <span class=\"class\">UIView</span> *tempTouchedView = [<span class=\"keyword\">self</span> <span class=\"method\">hasTouchCricleView:</span>touchPoint];         if(tempTouchedView){             recordMovePoints = [<span class=\"class\">NSMutableArray</span> <span class=\"method\">arrayWithObject:</span>@[@(tempTouchedView.tag),[<span class=\"class\">NSValue</span> <span class=\"method\">valueWithCGPoint:</span>tempTouchedView.center]]];             tempTouchedView.backgroundColor = [<span class=\"class\">UIColor</span> greenColor];             canDraw = <span class=\"class\">YES</span>;         }else{             canDraw = <span class=\"class\">NO</span>;         }     } //    move。     else if(pan.state == <span class=\"class\">UIGestureRecognizerStateChanged</span>){         if(!canDraw)return; //    判断拖动边界。         <span class=\"class\">CGPoint</span> touchPoint  = [pan <span class=\"method\">locationInView:</span>pan.view];         float dx = touchPoint.x,         dy = touchPoint.y; //        越界不能。         if(!<span class=\"class\">BetweenWithNumber</span>(@(dx),@<span class=\"number\">0</span>,@(<span class=\"keyword\">self</span>.frame.size.width)) || !<span class=\"class\">BetweenWithNumber</span>(@(dy),@<span class=\"number\">0</span>,@(<span class=\"keyword\">self</span>.frame.size.height)))return;         <span class=\"class\">UIView</span> *tempTouchedView = [<span class=\"keyword\">self</span> <span class=\"method\">hasTouchCricleView:</span>touchPoint]; //        不能重复。                  if(tempTouchedView){             if([[recordMovePoints <span class=\"method\">filteredArrayUsingPredicate:</span>[<span class=\"class\">NSPredicate</span> <span class=\"method\">predicateWithFormat:</span>@\\<span class=\"comment\">\"self[0] ==%d\\\"</span>,tempTouchedView.tag]] count]==<span class=\"number\">0</span>){                 if([[recordMovePoints lastObject][<span class=\"number\">0</span>] intValue]==<span class=\"number\">0</span>)[recordMovePoints <span class=\"method\">removeObject:</span>[recordMovePoints lastObject]]; //                <span class=\"class\">NSLog</span>(@\\<span class=\"comment\">\"recordMovePoints:%@\\\"</span>,recordMovePoints);                 tempTouchedView.backgroundColor = [<span class=\"class\">UIColor</span> greenColor];                 [recordMovePoints <span class=\"method\">addObject:</span>@[@(tempTouchedView.tag),[<span class=\"class\">NSValue</span> <span class=\"method\">valueWithCGPoint:</span>tempTouchedView.center]]];                 [<span class=\"keyword\">self</span> setNeedsDisplay];             }         }else{             if([[recordMovePoints lastObject][<span class=\"number\">0</span>] intValue]==<span class=\"number\">0</span>)[recordMovePoints <span class=\"method\">removeObject:</span>[recordMovePoints lastObject]];             [recordMovePoints <span class=\"method\">addObject:</span>@[@<span class=\"number\">0</span>,[<span class=\"class\">NSValue</span> <span class=\"method\">valueWithCGPoint:</span>touchPoint]]];             [<span class=\"keyword\">self</span> setNeedsDisplay];         }     } } -(void)hideSelf{     <span class=\"class\">CGRect</span> rect = <span class=\"keyword\">self</span>.frame;     rect.origin.y = [[<span class=\"class\">UIScreen</span> mainScreen] applicationFrame].size.height + <span class=\"number\">20</span>;     [<span class=\"class\">UIView</span> <span class=\"method\">animateWithDuration:</span><span class=\"number\">1</span> <span class=\"method\">animations:</span>^{         [<span class=\"keyword\">self</span> <span class=\"method\">setFrame:</span>rect];     }]; } -(void)showSelf{     <span class=\"class\">CGRect</span> rect = <span class=\"keyword\">self</span>.frame;     rect.origin.y = <span class=\"number\">0</span>;     [<span class=\"keyword\">self</span> <span class=\"method\">setFrame:</span>rect]; } //画图 -(void)<span class=\"method\">drawRect:</span>(<span class=\"class\">CGRect</span>)rect{     <span class=\"class\">CGContextRef</span> context = <span class=\"class\">UIGraphicsGetCurrentContext</span>();     <span class=\"class\">UIGraphicsBeginImageContextWithOptions</span>(<span class=\"keyword\">self</span>.frame.size, <span class=\"class\">YES</span>, <span class=\"number\">1</span>); //    如果没有记录拖拽的点，就清空     if(recordMovePoints==<span class=\"keyword\">nil</span> || recordMovePoints.count&lt;=<span class=\"number\">1</span>){         <span class=\"class\">CGContextSetFillColorWithColor</span>(context, <span class=\"keyword\">self</span>.backgroundColor.<span class=\"class\">CGColor</span>);         return <span class=\"class\">CGContextFillPath</span>(context);     } //    设置圆滑拐角     <span class=\"class\">CGContextSetLineJoin</span>(context, kCGLineJoinRound);     <span class=\"class\">CGPoint</span> beginPoint = [recordMovePoints[<span class=\"number\">0</span>][<span class=\"number\">1</span>] <span class=\"class\">CGPointValue</span>];     <span class=\"class\">CGContextMoveToPoint</span>(context, beginPoint.x, beginPoint.y);     <span class=\"class\">CGContextSetLineWidth</span>(context, <span class=\"class\">LineWidth</span>);     <span class=\"class\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"class\">UIColor</span> yellowColor].<span class=\"class\">CGColor</span>); //    开始画，根据点。     [recordMovePoints <span class=\"method\">enumerateObjectsUsingBlock:</span>^(<span class=\"class\">NSArray</span> *array,<span class=\"class\">NSUInteger</span> index,<span class=\"class\">BOOL</span> *stop){         <span class=\"class\">CGPoint</span> tempPoint = [array[<span class=\"number\">1</span>]  <span class=\"class\">CGPointValue</span>];         <span class=\"class\">CGContextAddLineToPoint</span>(context, tempPoint.x, tempPoint.y);     }];     <span class=\"class\">CGContextStrokePath</span>(context); } @end 调用： <span class=\"class\">GesturePassword</span> *pwdBoard = [[<span class=\"class\">GesturePassword</span> alloc] initByFrame];     pwdBoard.backgroundColor = [<span class=\"class\">UIColor</span> brownColor]; //    注册通知。     [pwdBoard registNotifyHandle];     pwdBoard.generatePassword = ^(<span class=\"class\">GesturePassword</span> *passboard,<span class=\"class\">NSString</span> *pwdString){         if([pwdString <span class=\"method\">isEqualToString:</span>@\\<span class=\"comment\">\"123456\\\"</span>]){             [passboard hideSelf];         }     };</div></pre></td></tr></table></figure>\n\n","source":"_posts/201407259.md","raw":"title: \"ios手势密码四川兄原创\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿```\n #import <UIKit/UIKit.h> #import <QuartzCore/QuartzCore.h> @interface GesturePassword : UIView @property(nonatomic,strong)NSMutableArray *recordMovePoints; @property(nonatomic,assign)void(^generatePassword)(GesturePassword *, NSString *); @property(nonatomic,strong)UIWindow *currentWindow; @property(nonatomic,strong)NSString *rightPwd; -(void)registNotifyHandle; -(void)hideSelf; -(void)showSelf; -(GesturePassword *)initByFrame; @end \n#import \\\"GesturePassword.h\\\" //记录触碰点 static NSMutableArray *recordCricleViews = nil; //是否允许绘图，因为起点必须先点击到圆圈上 static BOOL canDraw = NO; //基础tag，用来记录圆圈的tag，这个也用来组成密码 const static int PointBaseTag = 1; //线宽 const static int LineWidth = 6; #define BetweenWithNumber(V,A,B) [[NSPredicate predicateWithFormat:@\\\"self between {%f,%f}\\\",[(A) floatValue],[(B) floatValue]] evaluateWithObject:(V)] @implementation GesturePassword @synthesize recordMovePoints,generatePassword,currentWindow,rightPwd; //注册通知， -(void)registNotifyHandle{ //    后台来的时候执行锁屏操作     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(showLockScreen) name:UIApplicationWillEnterForegroundNotification object:nil]; } -(void)showLockScreen{     static BOOL hadAddSubview = NO; //    如果是挂上了，就直封屏     if(hadAddSubview){         [self showSelf];         return;     } //    挂在window上。     UIWindow *statusWindow = [[[UIApplication sharedApplication] delegate] window];     statusWindow.windowLevel = UIWindowLevelStatusBar;     [statusWindow addSubview:self];     hadAddSubview = YES; }  //初始化。 -(GesturePassword *)initByFrame{     if((self = [self initWithFrame:[[UIScreen mainScreen] bounds]])){     }     return self; } //初始化frame。 - (id)initWithFrame:(CGRect)frame {     self = [super initWithFrame:frame];     recordMovePoints = [NSMutableArray array];     if (self) {         recordCricleViews = [NSMutableArray array];         UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(gestPanGesture:)];         panGesture.minimumNumberOfTouches = panGesture.maximumNumberOfTouches = 1;         [self addGestureRecognizer:panGesture];         int i = 0,row=-1;         float w = self.frame.size.width, h = self.frame.size.height, radius = 20 , diameter = radius * 2;         //            算出每个物体之间的左右间距、         float spearX  = (w - (diameter * 3)) / 4,spearY = (h - (diameter * 3)) / 4;         while (i<9) {             int step = i%3;             if(step==0)++row;             float tempX = (step + 1) * spearX + step * diameter,tempY = (row+1) * spearY + row * diameter;             @autoreleasepool {                 CGRect tempRect = CGRectMake(tempX, tempY, diameter, diameter);                 UIView *cricleView = [[UIView alloc] initWithFrame:tempRect];                 cricleView.tag = PointBaseTag + i ;                 cricleView.layer.cornerRadius = radius;                 cricleView.backgroundColor = [UIColor grayColor];                 [self addSubview:cricleView];                 [recordCricleViews addObject:cricleView];             }             ++i;         }     }     return self; } //是否和几个目标物发生碰撞 -(UIView *)hasTouchCricleView:(CGPoint)point{     __block UIView *resultView = nil;     [recordCricleViews  enumerateObjectsUsingBlock:^(UIView *sview,NSUInteger index,BOOL *stop){         if([self rectsTouched:point eimRect:sview.frame]){             resultView = sview;             *stop = YES;         }     }];     return resultView; } //检测当前点击坐标和物体是否碰撞 -(BOOL)rectsTouched:(CGPoint )pointA eimRect:(CGRect)rectB{     BOOL inX = BetweenWithNumber(@(pointA.x),@(rectB.origin.x),@(rectB.origin.x + rectB.size.width)),                 inY = BetweenWithNumber(@(pointA.y),@(rectB.origin.y),@(rectB.origin.y + rectB.size.height));     return inX && inY; } //拖动手势 -(void)gestPanGesture:(UIPanGestureRecognizer *)pan{ //    松开     if(pan.state == UIGestureRecognizerStateEnded){         [recordCricleViews enumerateObjectsUsingBlock:^(UIView *tview,NSUInteger index,BOOL *stop){             [tview setBackgroundColor:[UIColor grayColor]];         }];         NSMutableString *string = [NSMutableString string];         [recordMovePoints enumerateObjectsUsingBlock:^(NSArray *array,NSUInteger index,BOOL *stop){ //            过滤掉0             if([array[0] intValue]>0)             [string appendFormat:@\\\"%d\\\",[array[0] intValue]];         }];         recordMovePoints = nil;         canDraw = NO;         [self setNeedsDisplay];         if(generatePassword){             generatePassword(self,string);         }         return;     } //    按下     else if(pan.state == UIGestureRecognizerStateBegan){         CGPoint touchPoint  = [pan locationInView:pan.view];         UIView *tempTouchedView = [self hasTouchCricleView:touchPoint];         if(tempTouchedView){             recordMovePoints = [NSMutableArray arrayWithObject:@[@(tempTouchedView.tag),[NSValue valueWithCGPoint:tempTouchedView.center]]];             tempTouchedView.backgroundColor = [UIColor greenColor];             canDraw = YES;         }else{             canDraw = NO;         }     } //    move。     else if(pan.state == UIGestureRecognizerStateChanged){         if(!canDraw)return; //    判断拖动边界。         CGPoint touchPoint  = [pan locationInView:pan.view];         float dx = touchPoint.x,         dy = touchPoint.y; //        越界不能。         if(!BetweenWithNumber(@(dx),@0,@(self.frame.size.width)) || !BetweenWithNumber(@(dy),@0,@(self.frame.size.height)))return;         UIView *tempTouchedView = [self hasTouchCricleView:touchPoint]; //        不能重复。                  if(tempTouchedView){             if([[recordMovePoints filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@\\\"self[0] ==%d\\\",tempTouchedView.tag]] count]==0){                 if([[recordMovePoints lastObject][0] intValue]==0)[recordMovePoints removeObject:[recordMovePoints lastObject]]; //                NSLog(@\\\"recordMovePoints:%@\\\",recordMovePoints);                 tempTouchedView.backgroundColor = [UIColor greenColor];                 [recordMovePoints addObject:@[@(tempTouchedView.tag),[NSValue valueWithCGPoint:tempTouchedView.center]]];                 [self setNeedsDisplay];             }         }else{             if([[recordMovePoints lastObject][0] intValue]==0)[recordMovePoints removeObject:[recordMovePoints lastObject]];             [recordMovePoints addObject:@[@0,[NSValue valueWithCGPoint:touchPoint]]];             [self setNeedsDisplay];         }     } } -(void)hideSelf{     CGRect rect = self.frame;     rect.origin.y = [[UIScreen mainScreen] applicationFrame].size.height + 20;     [UIView animateWithDuration:1 animations:^{         [self setFrame:rect];     }]; } -(void)showSelf{     CGRect rect = self.frame;     rect.origin.y = 0;     [self setFrame:rect]; } //画图 -(void)drawRect:(CGRect)rect{     CGContextRef context = UIGraphicsGetCurrentContext();     UIGraphicsBeginImageContextWithOptions(self.frame.size, YES, 1); //    如果没有记录拖拽的点，就清空     if(recordMovePoints==nil || recordMovePoints.count<=1){         CGContextSetFillColorWithColor(context, self.backgroundColor.CGColor);         return CGContextFillPath(context);     } //    设置圆滑拐角     CGContextSetLineJoin(context, kCGLineJoinRound);     CGPoint beginPoint = [recordMovePoints[0][1] CGPointValue];     CGContextMoveToPoint(context, beginPoint.x, beginPoint.y);     CGContextSetLineWidth(context, LineWidth);     CGContextSetStrokeColorWithColor(context, [UIColor yellowColor].CGColor); //    开始画，根据点。     [recordMovePoints enumerateObjectsUsingBlock:^(NSArray *array,NSUInteger index,BOOL *stop){         CGPoint tempPoint = [array[1]  CGPointValue];         CGContextAddLineToPoint(context, tempPoint.x, tempPoint.y);     }];     CGContextStrokePath(context); } @end 调用： GesturePassword *pwdBoard = [[GesturePassword alloc] initByFrame];     pwdBoard.backgroundColor = [UIColor brownColor]; //    注册通知。     [pwdBoard registNotifyHandle];     pwdBoard.generatePassword = ^(GesturePassword *passboard,NSString *pwdString){         if([pwdString isEqualToString:@\\\"123456\\\"]){             [passboard hideSelf];         }     };\n```\n\n\n","slug":"201407259","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"8shgkc0au4ujdrxf","comments":true,"layout":"post","photos":[],"link":""},{"title":"objectc之runtime四川兄原创","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿####object-c之runtime<br>最近看了些关于object-c（以下简称oc）的runtime文章，了解了些oc的原理，下面阐述下oc的一些机制</p>\n<h4 id=\"引：\">引：</h4>\n<p>\\toc是一门简单的语言，95%是C。只是在语言层面上加了些关键字和语法。真正让oc如此强大的是它的运行时。它很小但却很强大。它的核心是消息分发。<br>\\t1、runtime是开源的。可以去down：<a href=\"http://opensource.apple.com/tarballs/objc4/objc4-437.1.tar.gz\" target=\"_blank\" rel=\"external\">http://opensource.apple.com/tarballs/objc4/objc4-437.1.tar.gz</a><br>\\t2、runtime是（基本上，还有部分是汇编，反正很多都是各种宏，in my opinion）由C语言实现的。<br>\\t3、runtime的两个版本。（这个不知道要表达个什么，大概是些历史什么的）</p>\n<h4 id=\"归纳了下，oc的核心思想是消息机制，先说在这。\">归纳了下，oc的核心思想是消息机制，先说在这。</h4>\n<p>讲下oc里类的原理。首先我们看他对类的定义:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object {</div><div class=\"line\">    Class isa;</div><div class=\"line\">} *<span class=\"keyword\">id</span>;</div></pre></td></tr></table></figure>\n\n<p>大多数面向对象的语言里有 classes 和 objects 的概念。Objects通过Classes生成。但是在Objective-C中，classes本身也是objects(译者注：这点跟python很像)，也可以处理消息，这也是为什么会有类方法和实例方法。具体来说，Objective-C中的Object是一个结构体(struct)，第一个成员是isa，指向自己的class。这是在objc/objc.h中定义的。</p>\n<p>object的class保存了方法列表，还有指向父类的指针。但classes也是objects，也会有isa变量，那么它又指向哪儿呢？这里就引出了第三个类型: metaclasses。一个 metaclass被指向class，class被指向object。它保存了所有实现的方法列表，以及父类的metaclass<br>这个的定义在runtime.h里：<br>这里引入一段精辟的看不大清楚的话（Objective-C is a class-based object system. Each object is an instance of some class; the object\\’s isa pointer points to its class. That class describes the object\\’s data: allocation size and ivar types and layout. The class also describes the object\\’s behavior: the selectors it responds to and instance methods it implements.）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_class {</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">} OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n\n<p>从中可以清楚的看到一个Class到底里面是些什么东西，父类，名字，还有一堆我们关心的方法，协议，缓存数据等（还有几个，我不好意思说）。<br>可以看到方法协议，什么的都用的还是struct。</p>\n<p>下面我捡一些好听的来说。<br>当然我们肯定关心的是方法，首先看下方法列表的定义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_method_list {</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list *obsolete                        OBJC2_UNAVAILABLE;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> method_count                                         OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"preprocessor\">#ifdef __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"preprocessor\">#endif</span></div><div class=\"line\">    <span class=\"comment\">/* variable length structure */</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method method_list[<span class=\"number\">1</span>]                        OBJC2_UNAVAILABLE;</div><div class=\"line\">}                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n\n<p>大概是什么捏，我也看不大明白，没事继续看下方法的具体定义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method</span> </span>{</div><div class=\"line\">    SEL method_name                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    char *method_types                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    IMP method_imp                                           OBJC2_UNAVAILABLE;</div><div class=\"line\">}                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n\n<p>这下差不多了，这是具体方法的定义。这个内部的剖析，等下在说，先绕开往下说下objc_cache。<br>看看objc_cache的定义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_cache {</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask <span class=\"comment\">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> occupied                                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    Method buckets[<span class=\"number\">1</span>]                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">} <span class=\"comment\">/* GrP fixme should be OBJC2_UNAVAILABLE, but isn\\'t because of spurious warnings in [super ...] calls */</span>;</div></pre></td></tr></table></figure>\n\n<p>等下，这有个Method有点蕾丝objc_method哈，于是找到这个定义：<br>typedef struct objc_method *Method;<br>联系上鸟。</p>\n<p>好吧，不绕了，讲讲方法吧，这里也就是上面要涉及但憋回去的消息机制。<br>说起方法就不得不说他的机制，oc里的方法就是消息，Look：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSMutableArray *arr = [NSMutableArray arrayWithObject<span class=\"variable\">s:</span>@\\<span class=\"string\">\"dd\\\", nil];</span></div><div class=\"line\">[arr addObjec<span class=\"variable\">t:</span>@\\<span class=\"string\">\"k\\\"];</span></div><div class=\"line\">objc_msgSend(arr, @selector(addObjec<span class=\"variable\">t:</span>),@\\<span class=\"string\">\"pp\\\");</span></div><div class=\"line\">NSLog(@\\<span class=\"string\">\"arr:%@\\\"</span>,arr);</div></pre></td></tr></table></figure>\n\n<p>他们可以等价，调用array的insertObject的方法，参数分别是foo,5。上面就是典型的oc试，下面就是等价的消息模式，亲侧可行，前提是你得引入消息模式的文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#if TARGET_IPHONE_SIMULATOR</span></div><div class=\"line\"><span class=\"preprocessor\">#import &lt;objc/objc-runtime.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#else</span></div><div class=\"line\"><span class=\"preprocessor\">#import &lt;objc/runtime.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#import &lt;objc/message.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#endif</span></div></pre></td></tr></table></figure>\n\n<p>这就是引入。</p>\n<p>跑了有点裤子穿偏了，回过神来继续说这个objc_method,逐个说下<br>SEL 类成员方法的指针：<br>可以理解 @selector()就是取类方法的编号,他的行为基本可以等同C语言的中函数指针,只不过C语言中，可以把函数名直接赋给一个函数指针，而Object-C的类不能直接应用函数指针，这样只能做一个@selector语法来取.<br>可以用这个NSSelectorFromString直接取,NSStringFromSelector反转。</p>\n<p>简单说就是函数的地址，只不过函数的地址和函数实现的地址不在同一个地方。</p>\n<p>method_types 描述方法的参数列表. 在运行时注册选择器时使用.那时候方法名就会包含方法的参数列表</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">method_imp 之 <span class=\"type\">IMP</span> 是”implementation”的缩写，它是objetive-C 方法(<span class=\"keyword\">method</span>)实现代码块的地址，可像C函数一样直接调用。通常情况下我们是通过[<span class=\"keyword\">object</span> <span class=\"keyword\">method</span>:parameter]或objc_msgSend()的方式向对象发送消息，然后<span class=\"type\">Objective</span>-C运行时(<span class=\"type\">Objective</span>-C runtime)寻找匹配此消息的<span class=\"type\">IMP</span>,然后调用它;但有些时候我</div></pre></td></tr></table></figure>\n\n<p>们希望获取到IMP进行直接调用。</p>\n<p>简单来说method_imp就是函数实现的代码块地址。</p>\n<p>方法大概就这些，接下来就说下，对象是怎么找到方法的，这里涉及到一些原理，我们可以假装不知道的。<br>当一个对象去执行某一个方法的时候，首先去是cache里找method，因为这个最快（他们都是存到hash里的），当找不到的时候才去那个objc_method_list里找，如果还没有就去super_class里找，这样循环到根上也就是NSObject，还是没有就不好意思crash了。</p>\n<p>接下来说下平常coding有用的东西了</p>\n<p>class开头的方法是用来修改和自省classes。方法如class_addIvar, class_addMethod, class_addProperty和class_addProtocol允许重建classes。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">class_copyIvarList, class_copyMethodList, class_copyProtocolList和class_copyPropertyList能拿到一个<span class=\"class\"><span class=\"keyword\">class</span>的所有内容。而<span class=\"title\">class_getClassMethod</span>, <span class=\"title\">class_getClassVariable</span>, <span class=\"title\">class_getInstanceMethod</span>, <span class=\"title\">class_getInstanceVariable</span>, <span class=\"title\">class_getMethodImplementation</span>和<span class=\"title\">class_getProperty</span>返回单个内容。</span></div></pre></td></tr></table></figure>\n\n<p>假设我要取回去某个对象的属性或者方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">uint attrCount = <span class=\"number\">0</span>,selfCount = <span class=\"number\">0</span>;</div><div class=\"line\">objc_property_t *attrs = class_copyPropertyList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &attrCount);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> *<span class=\"title\">method</span> =  <span class=\"title\">class_copyMethodList</span><span class=\"params\">([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &selfCount)</span>;</span></div><div class=\"line\"><span class=\"keyword\">for</span> (int i=<span class=\"number\">0</span>;i&lt;=count;++i) <span class=\"comment\">{</span></div><div class=\"line\">        objc_property_t property = attrs[i];</div><div class=\"line\">        NSLog(@\\\"key:%s,value:%@\\\",property_getName(property),[self valueForKey:[NSString stringWithFormat:@\\\"%s\\\",property_getName(property)]]);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">for</span> (int i=<span class=\"number\">0</span>;i&lt;=count1;++i) <span class=\"comment\">{</span></div><div class=\"line\">    SEL sel = method_getName(method[i]);</div><div class=\"line\">    IMP imp = method_getImplementation(method[i]);</div><div class=\"line\">    NSLog(@\\\"sel:%s\\\",sel_getName(sel));</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这些都不算啥，现在说点动态的东西，比如动态添加属性，动态添加方法。</p>\n<p>这里其实我们需要用class_addMethod就可以了。</p>\n<p>这里有必要说下</p>\n<figure class=\"highlight +(BOOL)resolveInstanceMethod:(SEL)sel;\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">和</div><div class=\"line\"><span class=\"addition\">+(BOOL)resolveClassMethod:(SEL)sel;</span></div></pre></td></tr></table></figure>\n\n<p>字面上来说，一个是对象方法，一个是类方法，都是消息转发机制前调用的。</p>\n<p>意思是如果我们劫持重写这个，就可以添加一切我们想要的方法。<br>下面拿一个世界上最干净的类之一来说事：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">DB</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">DB</span></span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>如果我现在</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pseudo\">DB</span> *d = [<span class=\"pseudo\">DB</span> new]<span class=\"comment\">;</span></div><div class=\"line\">[d alert]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n\n<p>有人要说我傻x了，好吧，我牺牲自己引入下文：</p>\n<p>对，我们上面说到了劫持，所以我就继承了这个方法，并重写了下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">ex：</div><div class=\"line\">//这个就是alert函数实现的地方。</div><div class=\"line\"><span class=\"method\">ps:</span>这里得多说几句，第一个参数是消息的发起方，就对象，<span class=\"keyword\">self</span>就是方法的指针。必须的，后面的参数就跟着依次。</div><div class=\"line\">void defineIMPForAlert(id <span class=\"keyword\">self</span>,<span class=\"class\">SEL</span> _cmd){</div><div class=\"line\">    <span class=\"class\">NSLog</span>(@\\<span class=\"comment\">\"xxxx\\\"</span>);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"method\">ps:</span>这里可以通过重写这个，当然也可以在外面直接用class_addMethod.</div><div class=\"line\">+(<span class=\"class\">BOOL</span>)<span class=\"method\">resolveInstanceMethod:</span>(<span class=\"class\">SEL</span>)sel{</div><div class=\"line\">//当在调用alert的时候，会自动添加这个方法进去。</div><div class=\"line\">    if(sel == @selector(alert)){</div><div class=\"line\">    //这里就劫持了并添加并实现了我想要的方法。最后那个参数是个奇葩见(<span class=\"number\">1</span>)说明。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        class_addMethod([<span class=\"keyword\">self</span> class],sel,(<span class=\"class\">IMP</span>)defineIMPForAlert,[@\\<span class=\"comment\">\"v@:\\\"</span> <span class=\"class\">UTF8String</span>]);</div><div class=\"line\">        return <span class=\"class\">YES</span>;</div><div class=\"line\">    }</div><div class=\"line\">    return [<span class=\"keyword\">super</span> <span class=\"method\">resolveClassMethod:</span>sel];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>哈。我的对象就具备了alert的方法。也就是说我的对象就可以来发送alert的消息。好吧，就是说我[d performSelector:@selector(alert)];就合法了(注意这里不能直接写[d alert]，因为我那个是动态添加的应该是说要在运行的时候才有alert方法，所以ide并不知道，编译也不会让你过)。尽管我什么alert都没定义。</p>\n<p>记得上面说过属性也可以，是的，属性也可以。但网上的栗子都没成熟，所以，我就先放一个我测试过了的（看起来有点不舒服的栗子）。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">NSString</span>* name(id <span class=\"keyword\">self</span>,<span class=\"class\">SEL</span> _cmd){</div><div class=\"line\">    return objc_getAssociatedObject(<span class=\"keyword\">self</span>, @\\<span class=\"comment\">\"name\\\"</span>);</div><div class=\"line\">}</div><div class=\"line\">void setName(id <span class=\"keyword\">self</span>,<span class=\"class\">SEL</span> _cmd,<span class=\"class\">NSString</span> *name){</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, @\\<span class=\"comment\">\"name\\\"</span>, name, <span class=\"class\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);</div><div class=\"line\">}</div><div class=\"line\">class_addMethod([<span class=\"class\">DB</span> class],@selector(name),(<span class=\"class\">IMP</span>)name,[@\\<span class=\"comment\">\"@@:\\\"</span> <span class=\"class\">UTF8String</span>]);</div><div class=\"line\">class_addMethod([<span class=\"class\">DB</span> class],@selector(<span class=\"method\">setName:</span>),(<span class=\"class\">IMP</span>)setName,[@\\<span class=\"comment\">\"v@:@\\\"</span> <span class=\"class\">UTF8String</span>]);</div></pre></td></tr></table></figure>\n\n<p>这样我就可以</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr_selector\">[d performSelector:@selector(setName:) withObject:@\\\"ddd\\\"]</span>;</div><div class=\"line\"><span class=\"tag\">NSLog</span>(<span class=\"at_rule\">@<span class=\"keyword\">\\\"self.name:%@\\\",[d</span> performSelector:@<span class=\"function\">selector</span>(name)])</span>;</div></pre></td></tr></table></figure>\n\n<p>下面是些扩展用法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">interface</span> CC : NSObject</span></div><div class=\"line\"><span class=\"function\">-</span>(void)say;</div><div class=\"line\"><span class=\"tag\">-</span>(<span class=\"tag\">void</span>)<span class=\"tag\">sing</span>;</div><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">end</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@implementation CC</div><div class=\"line\"><span class=\"function\">-</span>(void)say{</div><div class=\"line\">    <span class=\"tag\">NSLog</span>(<span class=\"at_rule\">@<span class=\"keyword\">\\\"os\\\");</span></span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"function\">-</span>(void)sing{</div><div class=\"line\">    <span class=\"tag\">NSLog</span>(<span class=\"at_rule\">@<span class=\"keyword\">\\\"sn\\\");</span></span></div><div class=\"line\">}</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">BB *b = [BB <span class=\"keyword\">new</span>];</div><div class=\"line\"><span class=\"comment\">//我让b去继承cc的</span></div><div class=\"line\">object_setClass(b, [CC <span class=\"keyword\">class</span>]); <span class=\"comment\">//实现方法。见(2)</span></div><div class=\"line\"><span class=\"comment\">//于是b就有了say的方法</span></div><div class=\"line\">[b performSelector:@<span class=\"keyword\">selector</span>(say)];</div><div class=\"line\">CC *c = [CC <span class=\"keyword\">new</span>];</div><div class=\"line\"><span class=\"comment\">//获取say的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">methodSay</span> = <span class=\"title\">class_getInstanceMethod</span><span class=\"params\">([c <span class=\"keyword\">class</span>], @<span class=\"keyword\">selector</span>(say)</span>);</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">methodSing</span> = <span class=\"title\">class_getInstanceMethod</span><span class=\"params\">([c <span class=\"keyword\">class</span>], @<span class=\"keyword\">selector</span>(sing)</span>);</span></div><div class=\"line\"><span class=\"comment\">//交换2个方法</span></div><div class=\"line\">method_exchangeImplementations(methodSay, methodSing); <span class=\"comment\">//实现方法。见(3)</span></div><div class=\"line\"><span class=\"comment\">//于是有了结果的变化</span></div><div class=\"line\">[c say];</div><div class=\"line\">[c sing];</div><div class=\"line\"><span class=\"comment\">//b也跟着变了</span></div><div class=\"line\">[b performSelector:@<span class=\"keyword\">selector</span>(say)];</div></pre></td></tr></table></figure>\n\n<p>以上。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>)</div><div class=\"line\">c <span class=\"type\">char</span></div><div class=\"line\">i  <span class=\"type\">int</span></div><div class=\"line\">s short</div><div class=\"line\">l long</div><div class=\"line\">l <span class=\"keyword\">is</span> treated <span class=\"keyword\">as</span> a <span class=\"number\">32</span>-bit quantity on <span class=\"number\">64</span>-bit programs.</div><div class=\"line\">q long long</div><div class=\"line\">C unsigned <span class=\"type\">char</span></div><div class=\"line\">I unsigned <span class=\"type\">int</span></div><div class=\"line\">S unsigned short</div><div class=\"line\">L unsigned long</div><div class=\"line\">Q unsigned long long</div><div class=\"line\">f <span class=\"type\">float</span></div><div class=\"line\">d double</div><div class=\"line\">B C++ <span class=\"type\">bool</span> <span class=\"keyword\">or</span> a <span class=\"type\">C99</span> _Bool</div><div class=\"line\">v <span class=\"type\">void</span></div><div class=\"line\">* character <span class=\"type\">string</span> (<span class=\"type\">char</span> *)</div><div class=\"line\">@ <span class=\"keyword\">object</span> (whether statically typed <span class=\"keyword\">or</span> typed id)</div><div class=\"line\"><span class=\"comment\"># class object (Class)</span></div><div class=\"line\">: <span class=\"keyword\">method</span> selector (<span class=\"type\">SEL</span>)</div><div class=\"line\">[<span class=\"type\">array</span> <span class=\"keyword\">type</span>] <span class=\"type\">array</span></div><div class=\"line\">{name=<span class=\"keyword\">type</span>...} structure</div><div class=\"line\">(name=<span class=\"keyword\">type</span>...) A union</div><div class=\"line\">bnum bit field <span class=\"keyword\">of</span> num bits</div><div class=\"line\">^<span class=\"keyword\">type</span> <span class=\"type\">pointer</span> to <span class=\"keyword\">type</span></div><div class=\"line\">? <span class=\"type\">An</span> unknown <span class=\"keyword\">type</span> (among other things, this code <span class=\"keyword\">is</span> used <span class=\"keyword\">for</span> function pointers)</div><div class=\"line\"><span class=\"type\">PS</span>:貌似@：组成了返回类型和形参的分割线。</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> object_setClass(id obj, <span class=\"keyword\">Class</span> cls)</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj) {</div><div class=\"line\">        <span class=\"keyword\">Class</span> old;</div><div class=\"line\">        <span class=\"keyword\">do</span> {</div><div class=\"line\">            old = obj-&gt;isa;</div><div class=\"line\">        } <span class=\"keyword\">while</span> (! OSAtomicCompareAndSwapPtrBarrier(old, cls, (<span class=\"keyword\">void</span>*)&obj-&gt;isa));</div><div class=\"line\">        <span class=\"keyword\">return</span> old;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Nil;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">void method_exchangeImplementations(Method m1_gen, Method m2_gen)</div><div class=\"line\">{</div><div class=\"line\">    IMP m1_imp;</div><div class=\"line\">    <span class=\"keyword\">struct</span> old_method *m1 = <span class=\"number\">_</span>method_asOld(m1_gen);</div><div class=\"line\">    <span class=\"keyword\">struct</span> old_method *m2 = <span class=\"number\">_</span>method_asOld(m2_gen);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!m1  ||  !m2) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (m1-&gt;method_name == (SEL)kIgnore  ||  m2-&gt;method_name == (SEL)kIgnore) {</div><div class=\"line\">        <span class=\"comment\">// Ignored methods stay ignored. Now they\\'re both ignored.</span></div><div class=\"line\">        m1-&gt;method_imp = (IMP)&<span class=\"number\">_</span>objc_ignored_method;</div><div class=\"line\">        m2-&gt;method_imp = (IMP)&<span class=\"number\">_</span>objc_ignored_method;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    OSSpinLockLock(&impLock);</div><div class=\"line\">    m1_imp = m1-&gt;method_imp;</div><div class=\"line\">    m1-&gt;method_imp = m2-&gt;method_imp;</div><div class=\"line\">    m2-&gt;method_imp = m1_imp;</div><div class=\"line\">    OSSpinLockUnlock(&impLock);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072511.md","raw":"title: \"objectc之runtime四川兄原创\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿####object-c之runtime\n最近看了些关于object-c（以下简称oc）的runtime文章，了解了些oc的原理，下面阐述下oc的一些机制\n\n\n####引：\n\\toc是一门简单的语言，95%是C。只是在语言层面上加了些关键字和语法。真正让oc如此强大的是它的运行时。它很小但却很强大。它的核心是消息分发。\n\\t1、runtime是开源的。可以去down：http://opensource.apple.com/tarballs/objc4/objc4-437.1.tar.gz\n\\t2、runtime是（基本上，还有部分是汇编，反正很多都是各种宏，in my opinion）由C语言实现的。\n\\t3、runtime的两个版本。（这个不知道要表达个什么，大概是些历史什么的）\n\n\n####归纳了下，oc的核心思想是消息机制，先说在这。\n\n\n讲下oc里类的原理。首先我们看他对类的定义:\n\n```\ntypedef struct objc_class *Class;\ntypedef struct objc_object {\n    Class isa;\n} *id;\n```\n\n大多数面向对象的语言里有 classes 和 objects 的概念。Objects通过Classes生成。但是在Objective-C中，classes本身也是objects(译者注：这点跟python很像)，也可以处理消息，这也是为什么会有类方法和实例方法。具体来说，Objective-C中的Object是一个结构体(struct)，第一个成员是isa，指向自己的class。这是在objc/objc.h中定义的。\n\n\nobject的class保存了方法列表，还有指向父类的指针。但classes也是objects，也会有isa变量，那么它又指向哪儿呢？这里就引出了第三个类型: metaclasses。一个 metaclass被指向class，class被指向object。它保存了所有实现的方法列表，以及父类的metaclass\n这个的定义在runtime.h里：\n这里引入一段精辟的看不大清楚的话（Objective-C is a class-based object system. Each object is an instance of some class; the object\\'s isa pointer points to its class. That class describes the object\\'s data: allocation size and ivar types and layout. The class also describes the object\\'s behavior: the selectors it responds to and instance methods it implements.）\n\n\n```\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n\n\n} OBJC2_UNAVAILABLE;\n\n```\n\n\n\n从中可以清楚的看到一个Class到底里面是些什么东西，父类，名字，还有一堆我们关心的方法，协议，缓存数据等（还有几个，我不好意思说）。\n可以看到方法协议，什么的都用的还是struct。\n\n\n下面我捡一些好听的来说。\n当然我们肯定关心的是方法，首先看下方法列表的定义：\n\n```\nstruct objc_method_list {\n    struct objc_method_list *obsolete                        OBJC2_UNAVAILABLE;\n\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n```\n\n大概是什么捏，我也看不大明白，没事继续看下方法的具体定义：\n\n```\nstruct objc_method {\n    SEL method_name                                          OBJC2_UNAVAILABLE;\n    char *method_types                                       OBJC2_UNAVAILABLE;\n    IMP method_imp                                           OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n```\n\n这下差不多了，这是具体方法的定义。这个内部的剖析，等下在说，先绕开往下说下objc_cache。\n看看objc_cache的定义：\n\n```\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method buckets[1]                                        OBJC2_UNAVAILABLE;\n} /* GrP fixme should be OBJC2_UNAVAILABLE, but isn\\'t because of spurious warnings in [super ...] calls */;\n```\n\n等下，这有个Method有点蕾丝objc_method哈，于是找到这个定义：\ntypedef struct objc_method *Method;\n联系上鸟。\n\n\n好吧，不绕了，讲讲方法吧，这里也就是上面要涉及但憋回去的消息机制。\n说起方法就不得不说他的机制，oc里的方法就是消息，Look：\n\n```\nNSMutableArray *arr = [NSMutableArray arrayWithObjects:@\\\"dd\\\", nil];\n[arr addObject:@\\\"k\\\"];\nobjc_msgSend(arr, @selector(addObject:),@\\\"pp\\\");\nNSLog(@\\\"arr:%@\\\",arr);\n```\n\n他们可以等价，调用array的insertObject的方法，参数分别是foo,5。上面就是典型的oc试，下面就是等价的消息模式，亲侧可行，前提是你得引入消息模式的文件。\n\n```\n#if TARGET_IPHONE_SIMULATOR\n#import <objc/objc-runtime.h>\n#else\n#import <objc/runtime.h>\n#import <objc/message.h>\n#endif\n```\n\n这就是引入。\n\n\n跑了有点裤子穿偏了，回过神来继续说这个objc_method,逐个说下\nSEL 类成员方法的指针：\n可以理解 @selector()就是取类方法的编号,他的行为基本可以等同C语言的中函数指针,只不过C语言中，可以把函数名直接赋给一个函数指针，而Object-C的类不能直接应用函数指针，这样只能做一个@selector语法来取.\n可以用这个NSSelectorFromString直接取,NSStringFromSelector反转。\n\n\n简单说就是函数的地址，只不过函数的地址和函数实现的地址不在同一个地方。\n\n\nmethod_types 描述方法的参数列表. 在运行时注册选择器时使用.那时候方法名就会包含方法的参数列表\n\n\n```\nmethod_imp 之 IMP 是”implementation”的缩写，它是objetive-C 方法(method)实现代码块的地址，可像C函数一样直接调用。通常情况下我们是通过[object method:parameter]或objc_msgSend()的方式向对象发送消息，然后Objective-C运行时(Objective-C runtime)寻找匹配此消息的IMP,然后调用它;但有些时候我\n```\n\n们希望获取到IMP进行直接调用。\n\n\n简单来说method_imp就是函数实现的代码块地址。\n\n\n方法大概就这些，接下来就说下，对象是怎么找到方法的，这里涉及到一些原理，我们可以假装不知道的。\n当一个对象去执行某一个方法的时候，首先去是cache里找method，因为这个最快（他们都是存到hash里的），当找不到的时候才去那个objc_method_list里找，如果还没有就去super_class里找，这样循环到根上也就是NSObject，还是没有就不好意思crash了。\n\n\n接下来说下平常coding有用的东西了\n\n\nclass开头的方法是用来修改和自省classes。方法如class_addIvar, class_addMethod, class_addProperty和class_addProtocol允许重建classes。\n\n```\nclass_copyIvarList, class_copyMethodList, class_copyProtocolList和class_copyPropertyList能拿到一个class的所有内容。而class_getClassMethod, class_getClassVariable, class_getInstanceMethod, class_getInstanceVariable, class_getMethodImplementation和class_getProperty返回单个内容。\n```\n\n假设我要取回去某个对象的属性或者方法：\n\n```\nuint attrCount = 0,selfCount = 0;\nobjc_property_t *attrs = class_copyPropertyList([self class], &attrCount);\nMethod *method =  class_copyMethodList([self class], &selfCount);\nfor (int i=0;i<=count;++i) {\n        objc_property_t property = attrs[i];\n        NSLog(@\\\"key:%s,value:%@\\\",property_getName(property),[self valueForKey:[NSString stringWithFormat:@\\\"%s\\\",property_getName(property)]]);\n}\nfor (int i=0;i<=count1;++i) {\n    SEL sel = method_getName(method[i]);\n    IMP imp = method_getImplementation(method[i]);\n    NSLog(@\\\"sel:%s\\\",sel_getName(sel));\n}\n```\n\n这些都不算啥，现在说点动态的东西，比如动态添加属性，动态添加方法。\n\n\n这里其实我们需要用class_addMethod就可以了。\n\n\n这里有必要说下\n\n```+(BOOL)resolveInstanceMethod:(SEL)sel;\n和\n+(BOOL)resolveClassMethod:(SEL)sel;\n```\n\n字面上来说，一个是对象方法，一个是类方法，都是消息转发机制前调用的。\n\n\n意思是如果我们劫持重写这个，就可以添加一切我们想要的方法。\n下面拿一个世界上最干净的类之一来说事：\n\n```\n@interface DB : NSObject\n@end\n@implementation DB\n@end\n```\n\n如果我现在\n\n```\nDB *d = [DB new];\n[d alert];\n```\n\n有人要说我傻x了，好吧，我牺牲自己引入下文：\n\n\n对，我们上面说到了劫持，所以我就继承了这个方法，并重写了下\n\n```\nex：\n//这个就是alert函数实现的地方。\nps:这里得多说几句，第一个参数是消息的发起方，就对象，self就是方法的指针。必须的，后面的参数就跟着依次。\nvoid defineIMPForAlert(id self,SEL _cmd){\n    NSLog(@\\\"xxxx\\\");\n}\nps:这里可以通过重写这个，当然也可以在外面直接用class_addMethod.\n+(BOOL)resolveInstanceMethod:(SEL)sel{\n//当在调用alert的时候，会自动添加这个方法进去。\n    if(sel == @selector(alert)){\n    //这里就劫持了并添加并实现了我想要的方法。最后那个参数是个奇葩见(1)说明。\n\n\n        class_addMethod([self class],sel,(IMP)defineIMPForAlert,[@\\\"v@:\\\" UTF8String]);\n        return YES;\n    }\n    return [super resolveClassMethod:sel];\n}\n```\n\n哈。我的对象就具备了alert的方法。也就是说我的对象就可以来发送alert的消息。好吧，就是说我[d performSelector:@selector(alert)];就合法了(注意这里不能直接写[d alert]，因为我那个是动态添加的应该是说要在运行的时候才有alert方法，所以ide并不知道，编译也不会让你过)。尽管我什么alert都没定义。\n\n\n记得上面说过属性也可以，是的，属性也可以。但网上的栗子都没成熟，所以，我就先放一个我测试过了的（看起来有点不舒服的栗子）。\n\n```\nNSString* name(id self,SEL _cmd){\n    return objc_getAssociatedObject(self, @\\\"name\\\");\n}\nvoid setName(id self,SEL _cmd,NSString *name){\n    objc_setAssociatedObject(self, @\\\"name\\\", name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\nclass_addMethod([DB class],@selector(name),(IMP)name,[@\\\"@@:\\\" UTF8String]);\nclass_addMethod([DB class],@selector(setName:),(IMP)setName,[@\\\"v@:@\\\" UTF8String]);\n```\n\n这样我就可以\n\n```\n[d performSelector:@selector(setName:) withObject:@\\\"ddd\\\"];\nNSLog(@\\\"self.name:%@\\\",[d performSelector:@selector(name)]);\n```\n\n\n\n\n\n下面是些扩展用法。\n\n```\n@interface CC : NSObject\n-(void)say;\n-(void)sing;\n@end\n\n\n@implementation CC\n-(void)say{\n    NSLog(@\\\"os\\\");\n}\n-(void)sing{\n    NSLog(@\\\"sn\\\");\n}\n@end\n```\n\n\n```\nBB *b = [BB new];\n//我让b去继承cc的\nobject_setClass(b, [CC class]); //实现方法。见(2)\n//于是b就有了say的方法\n[b performSelector:@selector(say)];\nCC *c = [CC new];\n//获取say的方法\nMethod methodSay = class_getInstanceMethod([c class], @selector(say));\nMethod methodSing = class_getInstanceMethod([c class], @selector(sing));\n//交换2个方法\nmethod_exchangeImplementations(methodSay, methodSing); //实现方法。见(3)\n//于是有了结果的变化\n[c say];\n[c sing];\n//b也跟着变了\n[b performSelector:@selector(say)];\n```\n\n\n\n以上。\n\n\n```\n(1)\nc char\ni  int\ns short\nl long\nl is treated as a 32-bit quantity on 64-bit programs.\nq long long\nC unsigned char\nI unsigned int\nS unsigned short\nL unsigned long\nQ unsigned long long\nf float\nd double\nB C++ bool or a C99 _Bool\nv void\n* character string (char *)\n@ object (whether statically typed or typed id)\n# class object (Class)\n: method selector (SEL)\n[array type] array\n{name=type...} structure\n(name=type...) A union\nbnum bit field of num bits\n^type pointer to type\n? An unknown type (among other things, this code is used for function pointers)\nPS:貌似@：组成了返回类型和形参的分割线。\n```\n\n```\nClass object_setClass(id obj, Class cls)\n{\n    if (obj) {\n        Class old;\n        do {\n            old = obj->isa;\n        } while (! OSAtomicCompareAndSwapPtrBarrier(old, cls, (void*)&obj->isa));\n        return old;\n    }\n    else return Nil;\n}\n```\n\n```\nvoid method_exchangeImplementations(Method m1_gen, Method m2_gen)\n{\n    IMP m1_imp;\n    struct old_method *m1 = _method_asOld(m1_gen);\n    struct old_method *m2 = _method_asOld(m2_gen);\n    if (!m1  ||  !m2) return;\n\n\n    if (m1->method_name == (SEL)kIgnore  ||  m2->method_name == (SEL)kIgnore) {\n        // Ignored methods stay ignored. Now they\\'re both ignored.\n        m1->method_imp = (IMP)&_objc_ignored_method;\n        m2->method_imp = (IMP)&_objc_ignored_method;\n        return;\n    }\n\n\n    OSSpinLockLock(&impLock);\n    m1_imp = m1->method_imp;\n    m1->method_imp = m2->method_imp;\n    m2->method_imp = m1_imp;\n    OSSpinLockUnlock(&impLock);\n}\n```\n\n\n\n\n\n\n","slug":"2014072511","date":1406430153000,"updated":1406455322000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"7hr6l0xiiymdya8c","comments":true,"layout":"post","photos":[],"link":""},{"title":"数组归类前提是已经排序好笑脸","categories":["fto9rk4dsgy1i8x8"],"content":"<p>﻿这个方法可以将数组内元素相同的归位一类- (NSArray <em>)sort:(NSArray </em>)oldArr {</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> *newArr = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\"><span class=\"keyword\">id</span> tmpObj;</div><div class=\"line\">tmpObj = oldArr<span class=\"variable\">.firstObject</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> *tmpArr = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldArr<span class=\"variable\">.count</span>; i++) {</div><div class=\"line\"><span class=\"keyword\">if</span> ([tmpObj isEqual:oldArr[i]]) {</div><div class=\"line\">[tmpArr addObject:oldArr[i]];</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">else</span> {</div><div class=\"line\">[newArr addObject:tmpArr];</div><div class=\"line\">tmpArr = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">[tmpArr addObject:oldArr[i]];</div><div class=\"line\">tmpObj = oldArr[i];</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\">[newArr addObject:tmpArr];</div><div class=\"line\"><span class=\"keyword\">return</span> newArr;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSArray <span class=\"variable\">*arr</span> = <span class=\"variable\">@[</span><span class=\"variable\">@1</span>,<span class=\"variable\">@1</span>,<span class=\"variable\">@2</span>,<span class=\"variable\">@2</span>,<span class=\"variable\">@3</span>,<span class=\"variable\">@3</span>];</div><div class=\"line\">NSArray <span class=\"variable\">*arr12</span> = [self <span class=\"keyword\">sort</span>:arr];</div><div class=\"line\">NSLog(<span class=\"variable\">@\\</span><span class=\"string\">\"%@\\\",arr12);</span></div></pre></td></tr></table></figure>\n\n<p>前提是顺序必须排好</p>\n","source":"_posts/2014072520.md","raw":"title: \"数组归类前提是已经排序好笑脸\"\ntag: [ios]\ncategories: ios\n---\n\n\n﻿这个方法可以将数组内元素相同的归位一类- (NSArray *)sort:(NSArray *)oldArr {\n\n```\nNSMutableArray *newArr = [NSMutableArray array];\nid tmpObj;\ntmpObj = oldArr.firstObject;\nNSMutableArray *tmpArr = [NSMutableArray array];\nfor (int i = 0; i < oldArr.count; i++) {\nif ([tmpObj isEqual:oldArr[i]]) {\n[tmpArr addObject:oldArr[i]];\n}\nelse {\n[newArr addObject:tmpArr];\ntmpArr = [NSMutableArray array];\n[tmpArr addObject:oldArr[i]];\ntmpObj = oldArr[i];\n}\n}\n[newArr addObject:tmpArr];\nreturn newArr;\n}\n```\n\n\n\n\n例子：\n\n```\nNSArray *arr = @[@1,@1,@2,@2,@3,@3];\nNSArray *arr12 = [self sort:arr];\nNSLog(@\\\"%@\\\",arr12);\n```\n\n\n前提是顺序必须排好\n\n\n\n","slug":"2014072520","date":1406430153000,"updated":1406461129000,"tags":["mb0emmn943t6fg7o"],"excerpt":"","_id":"5eyd1it2whlfwuda","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于发布博客到github","categories":["918ccko9fc7a1cge"],"content":"<p>大家把博客文章以<strong><font size=\"7\">附件</font></strong>的形式发邮件到getiosmail#163.com。我会当天发布到github上去的。</p>\n<h4 id=\"说明的几点：\">说明的几点：</h4>\n<ul>\n<li>必须是markdown格式</li>\n<li>必须严格遵守markdown格式，特别是markdown标签必须闭合，否则可能会出现hexo转换失败</li>\n<li>每天下班回来都会开机，查看邮件。但也有例外，比如夜不归宿的时候。不过我会尽快发布的</li>\n<li>文件名必须遵守这种格式:datetime-name，例如201407251126-ios.md（时间最好精确到分钟，防止与其他文件冲突）</li>\n<li>如果博客内容里有使用到图片，图片的引用地址必须是 ../../../../img/imagename(四个..)，图片名称格式与文件名格式类似，都必须以日期时间开头。 </li>\n<li><em>在md文件的开头必须有如下四行内容</em></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title： “博客标题<span class=\"string\">\"  </span></div><div class=\"line\"><span class=\"keyword\">ta</span><span class=\"variable\">g:</span> [标签] 用英文中括号括起来，多个标签之间加逗号，比如[ios,android]\t</div><div class=\"line\">categorie<span class=\"variable\">s:</span> 所属目录\t</div><div class=\"line\">--- 紧跟着三个中划线</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014072601.md","raw":"title: \"关于发布博客到github\"\ntag: [github]\ncategories: github\n---\n\n大家把博客文章以**<font size=7>附件</font>**的形式发邮件到getiosmail#163.com。我会当天发布到github上去的。\n\n\n####说明的几点：\t\n- 必须是markdown格式\n- 必须严格遵守markdown格式，特别是markdown标签必须闭合，否则可能会出现hexo转换失败\n- 每天下班回来都会开机，查看邮件。但也有例外，比如夜不归宿的时候。不过我会尽快发布的\n- 文件名必须遵守这种格式:datetime-name，例如201407251126-ios.md（时间最好精确到分钟，防止与其他文件冲突）\n- 如果博客内容里有使用到图片，图片的引用地址必须是 ../../../../img/imagename(四个..)，图片名称格式与文件名格式类似，都必须以日期时间开头。 \n- *在md文件的开头必须有如下四行内容*\n\n```\ntitle： “博客标题\"  \ntag: [标签] 用英文中括号括起来，多个标签之间加逗号，比如[ios,android]\t\ncategories: 所属目录\t\n--- 紧跟着三个中划线\n```\n","slug":"2014072601","date":1406430648000,"updated":1406467614000,"tags":["h90urq8v1e97h8i3"],"excerpt":"","_id":"i7omlrntnm7eprnz","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"ios","_id":"mb0emmn943t6fg7o","posts":["oe7tcozf7pnkvqv6","rui53p0pcixzsuq3","468xijts4pndyy14","lj07xqgte4r77blm","r17d1ysaspkxp6ry","7uiti1xkctm1igv9","ci4agj6p3niduj7o","m3f6kl0w19mtslxz","yqmho05575ehd8yk","qcc1fwixbsxu558d","mrxuqp4au65wt7ln","q5cdb1gfcouieexe","lrxiehftylf6jqlu","qy3reslt5xpieoe6","k9ii4rjsxn5s14hc","0do00wccgezu8bjs","knyx9644dm28yrms","8gqvpesxaevvlhqq","8shgkc0au4ujdrxf","7hr6l0xiiymdya8c","5eyd1it2whlfwuda"]},{"name":"github","_id":"h90urq8v1e97h8i3","posts":["i7omlrntnm7eprnz"]}]}